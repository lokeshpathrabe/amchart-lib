{"version":3,"sources":["webpack:///./src/lib/charts/const/chart.js","webpack:///./src/lib/charts/configSchema.js","webpack:///./src/lib/charts/components/charts/ChartInterface.js","webpack:///./src/lib/charts/components/charts/ColumnSeriesChart.js","webpack:///./src/lib/charts/components/charts/StackedColumnChart.js","webpack:///./src/lib/charts/components/charts/PieChart.js","webpack:///./src/lib/charts/components/charts/index.js","webpack:///./src/lib/charts/configStore.js","webpack:///./src/lib/charts/components/legends/LegendWithValueText.js","webpack:///./src/lib/charts/const/legend.js","webpack:///./src/lib/charts/components/legends/index.js","webpack:///./src/lib/charts/components/bullets/LabelBullet.js","webpack:///./src/lib/charts/const/bullet.js","webpack:///./src/lib/charts/components/bullets/index.js","webpack:///./src/lib/charts/components/series/ColumnSeries.js","webpack:///./src/lib/charts/const/series.js","webpack:///./src/lib/charts/components/series/StackedColumnSeries.js","webpack:///./src/lib/charts/components/series/PieSeries.js","webpack:///./src/lib/charts/components/series/index.js","webpack:///./src/lib/charts/index.js","webpack:///./src/lib/maps/configStore.js","webpack:///./src/lib/maps/index.js","webpack:///./src/demo/index.js","webpack:///./src/index.js"],"names":["const_chart","COLUMN_SERIES_CHART","STACKED_COLUMN_SERIES_CHART","PIE_CHART","stackedColumnSeriesSchema","yup","shape","id","required","type","yAxis","min","max","series","list","of","color","name","value","legend","columnSeriesSchema","schema","config","CHARTS","isValidSync","ChartInterface","_classCallCheck","this","getChartConfig","getChartObj","chart","bindData","data","hideXAxes","xAxes","getIndex","renderer","disabled","hideYAxes","yAxes","setSeriesColumnWidth","columns","template","width","am4core","percent","hidexAxesGridLines","grid","hideYAxesGridLines","addScrolBarX","scrollbarX","Scrollbar","addScrolBarY","scrollbarY","ColumnSeriesChart","ColumnSeriesChart_classCallCheck","_this","_possibleConstructorReturn","_ChartInterface","call","am4charts","hiddenState","properties","opacity","colors","step","padding","simplifiedProcessing","push","dataFields","category","xAxis","calculateTotals","onColumnClick","callback","each","s","cursorOverStyle","pointer","events","on","StackedColumnSeriesChart","StackedColumnChart_classCallCheck","StackedColumnChart_possibleConstructorReturn","_ColumnSeriesChart","categoryAxis","minGridDistance","valueAxis","minWidth","maskBullets","PieChart","PieChart_classCallCheck","PieChart_possibleConstructorReturn","onSliceClick","slices","setCornerRadius","radius","cornerRadius","AllCharts","CHART_CONSTS","ConfigFactory","configStore_classCallCheck","getConfig","_config","_config$series","_config$legend","_objectWithoutProperties","LegendWithValueText","add","cfg","valueText","others","LegendWithValueText_objectWithoutProperties","key","legendSettings","LEGEND_WITH_VALUE_TEXT","AllLegends","LEGEND_CONSTS","LabelBullet","bulletText","LabelBullet_objectWithoutProperties","bullet","bullets","interactionsEnabled","label","text","locationY","fill","layout","const_bullet","LABEL_BULLET","AllBullets","BULLET_CONSTS","ColumnSeries","Array","isArray","map","tooltipText","tooltipHTML","categoryX","valueY","dataItems","locations","tooltip","pointerOrientation","column","cornerRadiusTopLeft","cornerRadiusTopRight","fillOpacity","_cfg$bullet","bulletConfig","ColumnSeries_objectWithoutProperties","Bullets","adapter","Object","keys","forEach","_cfg$adapter$type","_len","arguments","length","args","_key","apply","concat","const_series","COLUMN_SERIES","STACKED_COLUMN_SERIES","PIE_SERIES","StackedColumnSeries","stroke","stacked","valueYShow","StackedColumnSeries_objectWithoutProperties","PieSeries","radiusValue","PieSeries_objectWithoutProperties","AllSeries","SERIES_CONSTS","DruvaCharts","charts_classCallCheck","validateConfig","initConfigFactory","initChart","JSON","parse","err","Error","_typeof","document","querySelector","condid","configFactory","_configFactory$chartC","chartConfig","Charts","addSeries","addLegend","_configFactory$series","seriesConfig","Series","legendConfig","Legends","maps_configStore_classCallCheck","configStore_objectWithoutProperties","am4themes_animated","DruvaMaps","maps_classCallCheck","initMap","maps_typeof","isValid","am4maps","geodata","am4geodata_worldLow","projection","Miller","worldSeries","exclude","useGeodata","polygonTemplate","mapPolygons","nonScalingStroke","states","create","innerHTML","stackedColConfig","format","dy","fontSize","position","vAlign","chart1","DruvaChart","json","stackedColumnData","xAxesTemplate","labels","rotation","horizontalCenter","verticalCenter","colConfig","target","dataItem","index","chart2","columnSeriesData","setTimeout","activityData","activityChartConfig","ev","alert","chart3","pieChartConfig","pieChart","pieChartData","InitDemoChart"],"mappings":"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","file":"app.a53113bd.js","sourcesContent":["// Charts\r\nconst COLUMN_SERIES_CHART = \"COLUMN_SERIES_CHART\";\r\nconst STACKED_COLUMN_SERIES_CHART = \"STACKED_COLUMN_SERIES_CHART\";\r\nconst PIE_CHART = \"PIE_CHART\";\r\n\r\n\r\n\r\nexport default {\r\n    COLUMN_SERIES_CHART,\r\n    STACKED_COLUMN_SERIES_CHART,\r\n    PIE_CHART\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import * as yup from 'yup';\r\nimport CHARTS from './const/chart';\r\n\r\nconst stackedColumnSeriesSchema = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required(),\r\n    yAxis: yup.object().shape({\r\n        min: yup.number().required(),\r\n        max: yup.number().required(),\r\n    }),\r\n    series: yup.object().shape({\r\n        type: yup.string().required(),\r\n        list: yup.array().required().of(yup.object().shape({\r\n            color: yup.string().required(),\r\n            name: yup.string().required(),\r\n            value: yup.string().required(),\r\n        }))\r\n    }),\r\n    legend: yup.object().required().shape({\r\n        type: yup.string().required()\r\n    })\r\n});\r\n\r\nconst columnSeriesSchema = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required(),\r\n    series: yup.object().shape({\r\n        type: yup.string().required(),\r\n        list: yup.array().required().of(yup.object().shape({\r\n            color: yup.string().required(),\r\n            name: yup.string().required(),\r\n            value: yup.string().required(),\r\n        }))\r\n    })\r\n});\r\n\r\nexport const schema = {\r\n    isValid: (config) => {\r\n        switch(config.type) {\r\n            case CHARTS.STACKED_COLUMN_SERIES_CHART:\r\n                return stackedColumnSeriesSchema.isValidSync(config);\r\n            case CHARTS.COLUMN_SERIES_CHART:\r\n                return columnSeriesSchema.isValidSync(config);\r\n            default:\r\n                return stackedColumnSeriesSchema;   \r\n        }\r\n    }\r\n}","export default class ChartInterface {\r\n\r\n    constructor(config) {\r\n        this.config;\r\n    }\r\n\r\n    getChartConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    getChartObj(){\r\n        return this.chart;\r\n    }\r\n\r\n    bindData(data) {\r\n        this.chart.data = data;\r\n    }\r\n\r\n    hideXAxes() {\r\n        const xAxes = this.chart.xAxes.getIndex(0);\r\n        xAxes.renderer.disabled = true;\r\n    }\r\n    \r\n    hideYAxes() {\r\n        const yAxes = this.chart.yAxes.getIndex(0);\r\n        yAxes.renderer.disabled = true;\r\n    }\r\n\r\n    setSeriesColumnWidth() {\r\n        this.chart.series.columns.template.width = am4core.percent(70);\r\n    }\r\n\r\n    hidexAxesGridLines() {\r\n        const xAxes = this.chart.xAxes.getIndex(0);\r\n        xAxes.renderer.grid.template.disabled = true;\r\n    }\r\n\r\n    hideYAxesGridLines() {\r\n        const yAxes = this.chart.yAxes.getIndex(0);\r\n        yAxes.renderer.grid.template.disabled = true;\r\n    }\r\n\r\n    addScrolBarX(chart) {\r\n        this.chart.scrollbarX = new am4core.Scrollbar();\r\n    }\r\n\r\n    addScrolBarY(chart) {\r\n        this.chart.scrollbarY = new am4core.Scrollbar();\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\n\r\nexport default class ColumnSeriesChart extends ChartInterface {\r\n  constructor(config) {\r\n    super(config);\r\n    let chart = am4core.create(config.id, am4charts.XYChart);\r\n    chart.hiddenState.properties.opacity = 0;\r\n    chart.colors.step = 2;\r\n    chart.padding(30, 30, 10, 30);\r\n    chart.simplifiedProcessing = true;\r\n\r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = config.xAxis.category;\r\n  \r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.calculateTotals = true;\r\n    this.chart = chart;\r\n  }\r\n  \r\n  onColumnClick(callback) {\r\n    this.chart.series.each((s) => {\r\n      s.columns.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n      s.columns.template.events.on(\"hit\", callback);\r\n    });\r\n  }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\nimport ColumnSeriesChart from \"./ColumnSeriesChart\";\r\n\r\nexport default class StackedColumnSeriesChart extends ColumnSeriesChart {\r\n  constructor(config) {\r\n    super(config);\r\n    let categoryAxis = this.chart.xAxes.getIndex(0);\r\n    categoryAxis.renderer.grid.template.disabled = true;\r\n    categoryAxis.renderer.minGridDistance = 20;\r\n  \r\n    let valueAxis = this.chart.yAxes.getIndex(0);\r\n    valueAxis.min = config.yAxis.min;\r\n    valueAxis.max = config.yAxis.max;\r\n    valueAxis.renderer.minWidth = 10;\r\n    valueAxis.renderer.grid.template.disabled = true;\r\n    valueAxis.renderer.disabled = true;\r\n    valueAxis.renderer.minGridDistance = 10;\r\n\r\n    this.chart.maskBullets = false;\r\n  }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\n\r\nexport default class PieChart extends ChartInterface {\r\n  constructor(config) {\r\n    super(config);\r\n    let chart = am4core.create(config.id, am4charts.PieChart);\r\n    chart.hiddenState.properties.opacity = 0;\r\n    chart.colors.step = 3;\r\n    this.chart = chart;\r\n  }\r\n  \r\n  onSliceClick(callback) {\r\n    this.chart.series.each((s) => {\r\n      s.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n      s.slices.template.events.on(\"hit\", callback);\r\n    });\r\n  }\r\n\r\n  setCornerRadius(radius) { \r\n    this.chart.series.each((s) => s.slices.template.cornerRadius = radius);\r\n  }\r\n}","import ColumnSeriesChart from './ColumnSeriesChart';\r\nimport CHART_CONSTS from '../../const/chart';\r\nimport StackedColumnSeriesChart from './StackedColumnChart';\r\nimport PieChart from './PieChart';\r\n\r\nconst AllCharts = {}\r\nAllCharts[CHART_CONSTS.COLUMN_SERIES_CHART] = ColumnSeriesChart;\r\nAllCharts[CHART_CONSTS.STACKED_COLUMN_SERIES_CHART] = StackedColumnSeriesChart;\r\nAllCharts[CHART_CONSTS.PIE_CHART] = PieChart;\r\n\r\nexport default AllCharts;\r\n","export default class ConfigFactory {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    get chartConfig() {\r\n        const { id, yAxis, xAxis, type } = this.config;\r\n        return [type, { id, yAxis, xAxis }];\r\n    }\r\n\r\n    get seriesConfig() {\r\n        const { category } = this.config.xAxis;\r\n        const { type, list } = this.config.series;\r\n        return [type, {category, list}];\r\n    }\r\n\r\n    get legendConfig() {\r\n        if(this.config.legend) {\r\n            const { type, ...legendConfig } = this.config.legend;\r\n            return [type, legendConfig];\r\n        }\r\n        return null;\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n\r\nexport const LegendWithValueText = {\r\n  add: (chart, cfg) => {\r\n    const { valueText, ...others } = cfg;\r\n    chart.legend = new am4charts.Legend();\r\n    chart.series.each((s) => s.legendSettings.valueText = cfg.valueText)\r\n    for(let key in others) {\r\n      chart.legend[key] = others[key];\r\n    }\r\n  }\r\n}\r\n","// Legends\r\nconst LEGEND_WITH_VALUE_TEXT = \"LEGEND_WITH_VALUE_TEXT\";\r\n\r\nexport default {\r\n    LEGEND_WITH_VALUE_TEXT\r\n}","import {LegendWithValueText} from './LegendWithValueText';\r\nimport LEGEND_CONSTS from '../../const/legend';\r\n\r\nconst AllLegends = {}\r\nAllLegends[LEGEND_CONSTS.LEGEND_WITH_VALUE_TEXT] = LegendWithValueText\r\n\r\nexport default AllLegends;\r\n","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n\r\nexport const LabelBullet = {\r\n  add: (series, config) => {\r\n    const { color, bulletText, ...others } = config;\r\n    let bullet = series.bullets.push(new am4charts.LabelBullet());\r\n    bullet.interactionsEnabled = false;\r\n    bullet.label.text = config.bulletText;\r\n    bullet.locationY = 0.5;\r\n    bullet.label.fill = am4core.color(config.color);;\r\n    bullet.locationY = 0;\r\n    bullet.layout = 'none'\r\n    for(let key in others) {\r\n      bullet.label[key] = others[key];\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n}","// Bullets\r\n\r\nconst LABEL_BULLET = \"LABEL_BULLET\";\r\n\r\nexport default {\r\n    LABEL_BULLET\r\n}","import {LabelBullet} from './LabelBullet';\r\nimport BULLET_CONSTS from '../../const/bullet';\r\n\r\nconst AllBullets = {}\r\nAllBullets[BULLET_CONSTS.LABEL_BULLET] = LabelBullet\r\n\r\nexport default AllBullets;\r\n","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const ColumnSeries ={ \r\n  add: (chart, config) => {\r\n    if(config && Array.isArray(config.list)) {\r\n      const { category, list } = config;\r\n      return list.map((cfg) => {\r\n        const { tooltipText, tooltipHTML} = cfg;\r\n\r\n        const color = am4core.color(cfg.color);\r\n    \r\n        let series = chart.series.push(new am4charts.ColumnSeries());\r\n        series.columns.template.width = am4core.percent(70);\r\n\r\n        if(tooltipText) {\r\n          series.columns.template.tooltipText = tooltipText;\r\n        }\r\n\r\n        if(tooltipHTML) {\r\n          series.columns.template.tooltipHTML = tooltipHTML;\r\n        }\r\n        \r\n        series.name = cfg.name;\r\n        series.dataFields.categoryX = category;\r\n        series.dataFields.valueY = cfg.value;\r\n        series.dataItems.template.locations.categoryX = 0.5;\r\n        series.tooltip.pointerOrientation = \"vertical\";\r\n        series.columns.template.fill = color;\r\n        series.columns.template.column.cornerRadiusTopLeft = 10;\r\n        series.columns.template.column.cornerRadiusTopRight = 10;\r\n        series.columns.template.column.fillOpacity = 0.8;\r\n\r\n        //Add buller if config available\r\n        if(cfg.bullet) {\r\n          const {type, ...bulletConfig} = cfg.bullet;\r\n          Bullets[type].add(series, bulletConfig);\r\n        }\r\n\r\n        //Add adaptors on series if provided\r\n        if(cfg.adapter) {\r\n          Object.keys(cfg.adapter).forEach((type) => {\r\n            const wrapper = (...args) => {\r\n              return cfg.adapter[type].call(null, ...args, chart);\r\n            }\r\n            series.columns.template.adapter.add(type, wrapper);\r\n          })\r\n        }\r\n    \r\n        return series;\r\n      })\r\n    }\r\n  }\r\n}","// Series\r\n\r\nconst COLUMN_SERIES = \"COLUMN_SERIES\";\r\nconst STACKED_COLUMN_SERIES = \"STACKED_COLUMN_SERIES\";\r\nconst PIE_SERIES = \"PIE_SERIES\";\r\n\r\n\r\nexport default {\r\n    COLUMN_SERIES,\r\n    STACKED_COLUMN_SERIES,\r\n    PIE_SERIES\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const StackedColumnSeries ={ \r\n    add: (chart, config) => {\r\n      if(config && Array.isArray(config.list)) {\r\n        const { category, list } = config;\r\n        return list.map((cfg) => {\r\n\r\n            const tooltipText = cfg.tooltipText;\r\n            const tooltipHTML = cfg.tooltipHTML;\r\n            const color = am4core.color(cfg.color);\r\n\r\n            let series = chart.series.push(new am4charts.ColumnSeries());\r\n            series.name = cfg.name;\r\n            series.stroke = false;\r\n            series.stacked = true;\r\n            series.columns.template.width = am4core.percent(50);\r\n            series.columns.template.tooltipText = tooltipText;\r\n            series.columns.template.tooltipHTML = tooltipHTML;\r\n            series.columns.template.fill = color;\r\n            series.columns.template.column.fillOpacity = 0.8;\r\n            series.dataFields.categoryX = category;\r\n            series.dataFields.valueY = cfg.value;\r\n            series.dataFields.valueYShow = \"totalPercent\";\r\n            series.dataItems.template.locations.categoryX = 0.5;\r\n\r\n            series.tooltip.pointerOrientation = \"vertical\";\r\n\r\n            //Add buller if config available\r\n            if(cfg.bullet) {\r\n                const {type, ...bulletConfig} = cfg.bullet;\r\n                Bullets[type].add(series, bulletConfig);\r\n            }\r\n\r\n            //Add adaptors on series if provided\r\n            if(cfg.adapter) {\r\n                Object.keys(cfg.adapter).forEach((type) => {\r\n                const wrapper = (...args) => {\r\n                    return cfg.adapter[type].call(null, ...args, chart);\r\n                }\r\n                series.columns.template.adapter.add(type, wrapper);\r\n                })\r\n            }\r\n        \r\n            return series;\r\n        });\r\n      }\r\n    }\r\n  }","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const PieSeries ={ \r\n  add: (chart, config) => {\r\n    if(config && Array.isArray(config.list)) {\r\n      const { category, list } = config;\r\n      return list.map((cfg) => {\r\n        const { tooltipText, tooltipHTML} = cfg;\r\n\r\n        let series = chart.series.push(new am4charts.PieSeries());\r\n\r\n        if(tooltipText) {\r\n            series.slices.template.tooltipText = tooltipText;\r\n        }\r\n        \r\n        if(tooltipHTML) {\r\n            series.slices.template.tooltipHTML = tooltipHTML;\r\n        }\r\n        \r\n        series.dataFields.category = category;\r\n        series.dataFields.value = cfg.value;\r\n\r\n        if(cfg.radiusValue) {\r\n            series.dataFields.radiusValue = cfg.radiusValue;\r\n        }\r\n\r\n        //Add buller if config available\r\n        if(cfg.bullet) {\r\n          const {type, ...bulletConfig} = cfg.bullet;\r\n          Bullets[type].add(series, bulletConfig);\r\n        }\r\n\r\n        //Add adaptors on series if provided\r\n        if(cfg.adapter) {\r\n          Object.keys(cfg.adapter).forEach((type) => {\r\n            const wrapper = (...args) => {\r\n              return cfg.adapter[type].call(null, ...args, chart);\r\n            }\r\n            series.slices.template.adapter.add(type, wrapper);\r\n          })\r\n        }\r\n    \r\n        return series;\r\n      })\r\n    }\r\n  }\r\n}","import { ColumnSeries } from './ColumnSeries';\r\nimport SERIES_CONSTS from '../../const/series';\r\nimport { StackedColumnSeries } from './StackedColumnSeries';\r\nimport { PieSeries } from './PieSeries';\r\nconst AllSeries = {}\r\n\r\nAllSeries[SERIES_CONSTS.COLUMN_SERIES] = ColumnSeries;\r\nAllSeries[SERIES_CONSTS.STACKED_COLUMN_SERIES] = StackedColumnSeries;\r\nAllSeries[SERIES_CONSTS.PIE_SERIES] = PieSeries\r\n\r\nexport default AllSeries;\r\n","import { schema } from \"./configSchema\";\r\nimport Charts from './components/charts';\r\nimport ConfigFactory from \"./configStore\";\r\nimport Legends from \"./components/legends\";\r\nimport Series from \"./components/series\";\r\n\r\nexport default class DruvaCharts {\r\n    constructor(id, config) {\r\n        config = {id, ...config};\r\n        this.validateConfig(config);\r\n        this.initConfigFactory(config);\r\n        return this.initChart();\r\n    }\r\n\r\n    validateConfig(config) {\r\n        if(typeof(config) === 'string') {\r\n            try{\r\n                config = JSON.parse(config);\r\n            } catch (err){\r\n                throw new Error('Invalid chart config.');\r\n            }\r\n        } else if(typeof(config) === 'object'){\r\n            config = config;\r\n        }\r\n\r\n        //Yup vlaidation for object\r\n        if(!schema.isValid(config)) {\r\n            throw new Error('Invalid chart config.');\r\n        }\r\n\r\n        if(!document.querySelector(`#${config.id}`)) {\r\n            throw new Error(`Element with id ${condid.id} not found`);\r\n        }\r\n    }\r\n\r\n    initConfigFactory(config) {\r\n        this.configFactory = new ConfigFactory(config);\r\n    }\r\n\r\n    initChart() {\r\n        const [type, cfg] = this.configFactory.chartConfig;\r\n        let chart = new Charts[type](cfg);\r\n        this.chart = chart.getChartObj();\r\n        this.addSeries();\r\n        this.addLegend();\r\n        return chart;\r\n    }\r\n\r\n    addSeries() {\r\n        const [type, cfg] = this.configFactory.seriesConfig;\r\n        Series[type].add(this.chart, cfg);\r\n    }\r\n\r\n    addLegend() {\r\n        const config = this.configFactory.legendConfig;\r\n        if(config) {\r\n            const [type, cfg] = config;\r\n            Legends[type].add(this.chart, cfg);\r\n        }\r\n    }\r\n}","export default class ConfigFactory {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    get chartConfig() {\r\n        const { id, yAxis, xAxis, type } = this.config;\r\n        return [type, { id, yAxis, xAxis }];\r\n    }\r\n\r\n    get seriesConfig() {\r\n        const { category } = this.config.xAxis;\r\n        const { type, list } = this.config.series;\r\n        return [type, {category, list}];\r\n    }\r\n\r\n    get legendConfig() {\r\n        if(this.config.legend) {\r\n            const { type, ...legendConfig } = this.config.legend;\r\n            return [type, legendConfig];\r\n        }\r\n        return null;\r\n    }\r\n}","import { schema } from \"./configSchema\";\r\nimport ConfigFactory from \"./configStore\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\n//import am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nexport default class DruvaMaps {\r\n    constructor(id, config) {\r\n        config = {id, ...config};\r\n        //this.validateConfig(config);\r\n        //this.initConfigFactory(config);\r\n        return this.initMap();\r\n    }\r\n\r\n    validateConfig(config) {\r\n        if(typeof(config) === 'string') {\r\n            try{\r\n                config = JSON.parse(config);\r\n            } catch (err){\r\n                throw new Error('Invalid chart config.');\r\n            }\r\n        } else if(typeof(config) === 'object'){\r\n            config = config;\r\n        }\r\n\r\n        //Yup vlaidation for object\r\n        if(!schema.isValid(config)) {\r\n            throw new Error('Invalid chart config.');\r\n        }\r\n\r\n        if(!document.querySelector(`#${config.id}`)) {\r\n            throw new Error(`Element with id ${condid.id} not found`);\r\n        }\r\n    }\r\n\r\n    initConfigFactory(config) {\r\n        this.configFactory = new ConfigFactory(config);\r\n    }\r\n\r\n    initMap() {\r\n        let chart = am4core.create(\"worldmap\", am4maps.MapChart);\r\n        chart.geodata = am4geodata_worldLow;\r\n        chart.projection = new am4maps.projections.Miller();\r\n\r\n        let worldSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        worldSeries.exclude = [\"AQ\"];\r\n        worldSeries.useGeodata = true;\r\n\r\n        let polygonTemplate = worldSeries.mapPolygons.template;\r\n        polygonTemplate.tooltipText = \"{name}\";\r\n        polygonTemplate.fill = chart.colors.getIndex(0);\r\n        polygonTemplate.nonScalingStroke = true;\r\n\r\n        let hs = polygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = am4core.color(\"#367B25\");\r\n\r\n        // // Series for United States map\r\n        // let usaSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        // usaSeries.geodata = am4geodata_usaLow;\r\n        // let usPolygonTemplate = usaSeries.mapPolygons.template;\r\n        // usPolygonTemplate.tooltipText = \"{name}\";\r\n        // usPolygonTemplate.fill = chart.colors.getIndex(1);\r\n        // usPolygonTemplate.nonScalingStroke = true;\r\n\r\n        // Hover state\r\n        // hs = usPolygonTemplate.states.create(\"hover\");\r\n        // hs.properties.fill = am4core.color(\"#367B25\");\r\n    }\r\n\r\n    addSeries() {\r\n        const [type, cfg] = this.configFactory.seriesConfig;\r\n        Series[type].add(this.chart, cfg);\r\n    }\r\n\r\n    addLegend() {\r\n        const config = this.configFactory.legendConfig;\r\n        if(config) {\r\n            const [type, cfg] = config;\r\n            Legends[type].add(this.chart, cfg);\r\n        }\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport \"./styles.css\";\r\nimport DruvaChart from '../lib/charts';\r\nimport Charts from '../lib/charts/const/chart';\r\nimport Legends from '../lib/charts/const/legend';\r\nimport Series from '../lib/charts/const/series';\r\nimport Bullets from '../lib/charts/const/bullet';\r\nimport json from './data.json';\r\nimport DruvaMaps from \"../lib/maps\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\nexport default function InitDemoChart() {\r\n\r\n    //Stacked Column Series Chart\r\n    const stackedColConfig = {\r\n         //throw error if this element is not present\r\n        type: Charts.STACKED_COLUMN_SERIES_CHART,\r\n        xAxis: {\r\n            category: 'category'\r\n        },\r\n        yAxis: {\r\n          min: 0,\r\n          max: 100\r\n        },\r\n        series: {\r\n            type: Series.STACKED_COLUMN_SERIES,\r\n            list: [{ // Will always be as array\r\n                    color: \"#FBC67A\",\r\n                    format: \"#\",\r\n                    name: \"Files Modification Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value1\"\r\n                },\r\n                {\r\n                    color: \"#88A7EC\",\r\n                    format: \"#\",\r\n                    name: \"Files Encryption Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value2\"\r\n                },\r\n                {\r\n                    color: \"#88E6AF\",\r\n                    format: \"#\",\r\n                    name: \"Files Deletion Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value3\"\r\n                },\r\n                {\r\n                    color: \"#EE74A2\",\r\n                    format: \"#\",\r\n                    name: \"Files Creation Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value4\",\r\n                    bullet: {\r\n                        type: Bullets.LABEL_BULLET,\r\n                        bulletText: \"{valueY.total}\",\r\n                        fill: '#000',\r\n                        dy: -20,\r\n                        fontSize: 20\r\n                    }\r\n                }\r\n            ]},\r\n        legend: {\r\n            type: Legends.LEGEND_WITH_VALUE_TEXT,\r\n            position: 'right',\r\n            vAlign: 'bottom',\r\n            value: 'valueY'\r\n        }\r\n    }\r\n    let chart1 = new DruvaChart('stackedColumnSeries', stackedColConfig);\r\n\r\n    if(json.stackedColumnData.length > 7){\r\n        const xAxesTemplate = chart1.getChartObj().xAxes.getIndex(0).renderer.labels.template;\r\n        xAxesTemplate.rotation = -90;\r\n        xAxesTemplate.horizontalCenter = \"middle\";\r\n        xAxesTemplate.verticalCenter = \"middle\";\r\n    }\r\n    chart1.bindData(json.stackedColumnData);\r\n\r\n\r\n\r\n    // Column Series Chart\r\n    const colConfig = {\r\n        //throw error if this element is not present\r\n       type: Charts.COLUMN_SERIES_CHART,\r\n       xAxis: {\r\n           category: 'country'\r\n       },\r\n       series: {\r\n           type: Series.COLUMN_SERIES,\r\n           list: [{ // Will always be as array\r\n                   color: \"#FBC87A\",\r\n                   format: \"#\",\r\n                   name: \"Files Modification Alerts\",\r\n                   tooltipText: \"{valueY.value}\",\r\n                   value: \"visits\",\r\n                   adapter: {\r\n                    \"fill\": (fill, target, key, chart) => {\r\n                     return chart.colors.getIndex(target.dataItem.index);\r\n                   }\r\n                }\r\n               }\r\n           ]\r\n        }\r\n   }\r\n   let chart2 = new DruvaChart('columnSeries', colConfig);\r\n   chart2.bindData(json.columnSeriesData);\r\n   setTimeout(() => chart2.bindData(json.activityData), 5000);\r\n\r\n    // Column Series Chart\r\n    const activityChartConfig = {\r\n    //throw error if this element is not present\r\n    type: Charts.COLUMN_SERIES_CHART,\r\n    xAxis: {\r\n        category: 'country'\r\n    },\r\n    series: {\r\n        type: Series.COLUMN_SERIES,\r\n        list: [{ // Will always be as array\r\n                color: \"#FBC87A\",\r\n                format: \"#\",\r\n                name: \"Files Modification Alerts\",\r\n                tooltipText: \"{valueY.value}\",\r\n                value: \"visits\",\r\n                adapter: {\r\n                \"fill\": (fill, target, key, chart) => {\r\n                    if(target.dataItem.valueY > 2000){\r\n                        return am4core.color(\"#EE74A2\");\r\n                    }\r\n                    return am4core.color(\"#8A98B6\");;\r\n                }\r\n            }\r\n            }\r\n        ]\r\n    }\r\n    }\r\n\r\n    chart2.onColumnClick(function(ev) {\r\n        alert(\"Clicked on \" + ev.target.dataItem.categoryX + \": \" + ev.target.dataItem.valueY);\r\n    });\r\n\r\n   let chart3 = new DruvaChart('activityChart', activityChartConfig);\r\n   chart3.hideXAxes();\r\n   chart3.hideYAxes();\r\n   chart3.hideYAxesGridLines();\r\n   chart3.hidexAxesGridLines();\r\n   chart3.bindData(json.activityData);\r\n\r\n    // PieChart\r\n\r\n    let pieChartConfig = {\r\n        //throw error if this element is not present\r\n       type: Charts.PIE_CHART,\r\n       xAxis: {\r\n           category: 'country'\r\n       },\r\n       series: {\r\n           type: Series.PIE_SERIES,\r\n           list: [{ // Will always be as array\r\n                   tooltipHTML: \"<b>{category}: {value}</b>\",\r\n                   value: \"value\",\r\n                   radiusValue: \"value\"\r\n               }\r\n           ]\r\n        },\r\n        legend: {\r\n            type: Legends.LEGEND_WITH_VALUE_TEXT,\r\n            position: 'bottom',\r\n            vAlign: 'bottom',\r\n            valueText: '{value}'\r\n        }\r\n   }\r\n\r\n   let pieChart = new DruvaChart('pieChart', pieChartConfig);\r\n   pieChart.bindData(json.pieChartData);\r\n   pieChart.setCornerRadius(6);\r\n\r\n   // world map\r\n\r\n   let map = new DruvaMaps();\r\n}\r\n\r\n","import InitDemoChart from \"./demo\";\n\nlet app = document.querySelector('#tittle')\napp.innerHTML = '<h2>Welcome to amChartLib</h2>'\nInitDemoChart();"],"sourceRoot":""}