{"version":3,"sources":["webpack:///./src/lib/charts/const/chart.js","webpack:///./src/lib/charts/configSchema.js","webpack:///./src/lib/charts/components/charts/ChartInterface.js","webpack:///./src/lib/charts/components/charts/ColumnSeriesChart.js","webpack:///./src/lib/charts/components/charts/StackedColumnChart.js","webpack:///./src/lib/charts/components/charts/PieChart.js","webpack:///./src/lib/charts/components/charts/index.js","webpack:///./src/lib/charts/configStore.js","webpack:///./src/lib/charts/components/legends/LegendWithValueText.js","webpack:///./src/lib/charts/const/legend.js","webpack:///./src/lib/charts/components/legends/index.js","webpack:///./src/lib/charts/components/bullets/LabelBullet.js","webpack:///./src/lib/charts/const/bullet.js","webpack:///./src/lib/charts/components/bullets/index.js","webpack:///./src/lib/charts/components/series/ColumnSeries.js","webpack:///./src/lib/charts/const/series.js","webpack:///./src/lib/charts/components/series/StackedColumnSeries.js","webpack:///./src/lib/charts/components/series/PieSeries.js","webpack:///./src/lib/charts/components/series/index.js","webpack:///./src/lib/charts/index.js","webpack:///./src/demo/chart/index.js","webpack:///./src/lib/maps/const/map.js","webpack:///./src/lib/maps/configSchema.js","webpack:///./src/lib/maps/configStore.js","webpack:///./src/lib/maps/components/maps/WorldMap.js","webpack:///./src/lib/maps/components/maps/MapInterface.js","webpack:///./src/lib/maps/components/maps/index.js","webpack:///./src/lib/maps/const/series.js","webpack:///./src/lib/maps/components/series/worldSeries.js","webpack:///./src/lib/maps/components/series/indiaSeries.js","webpack:///./src/lib/maps/components/series/usaSeries.js","webpack:///./src/lib/maps/components/series/drillDownWorldSeries.js","webpack:///./src/lib/maps/components/series/imageSeries.js","webpack:///./src/lib/maps/components/series/index.js","webpack:///./src/lib/maps/index.js","webpack:///./src/index.js","webpack:///./src/demo/map/index.js"],"names":["const_chart","COLUMN_SERIES_CHART","STACKED_COLUMN_SERIES_CHART","PIE_CHART","stackedColumnSeriesSchema","yup","shape","id","required","type","yAxis","min","max","series","list","of","color","name","value","legend","columnSeriesSchema","schema","config","CHARTS","isValidSync","ChartInterface","_classCallCheck","this","getChartConfig","getChartObj","chart","bindData","data","hideXAxes","xAxes","getIndex","renderer","disabled","hideYAxes","yAxes","setSeriesColumnWidth","columns","template","width","am4core","percent","hidexAxesGridLines","grid","hideYAxesGridLines","addScrolBarX","scrollbarX","Scrollbar","addScrolBarY","scrollbarY","ColumnSeriesChart","ColumnSeriesChart_classCallCheck","_this","_possibleConstructorReturn","_ChartInterface","call","am4charts","hiddenState","properties","opacity","colors","step","padding","simplifiedProcessing","push","dataFields","category","xAxis","calculateTotals","onColumnClick","callback","each","s","cursorOverStyle","pointer","events","on","StackedColumnSeriesChart","StackedColumnChart_classCallCheck","StackedColumnChart_possibleConstructorReturn","_ColumnSeriesChart","categoryAxis","minGridDistance","valueAxis","minWidth","maskBullets","PieChart","PieChart_classCallCheck","PieChart_possibleConstructorReturn","onSliceClick","slices","setCornerRadius","radius","cornerRadius","AllCharts","CHART_CONSTS","ConfigFactory","configStore_classCallCheck","getConfig","_config","_config$series","_config$legend","_objectWithoutProperties","LegendWithValueText","add","cfg","valueText","others","LegendWithValueText_objectWithoutProperties","key","legendSettings","LEGEND_WITH_VALUE_TEXT","AllLegends","LEGEND_CONSTS","LabelBullet","bulletText","LabelBullet_objectWithoutProperties","bullet","bullets","interactionsEnabled","label","text","locationY","fill","layout","const_bullet","LABEL_BULLET","AllBullets","BULLET_CONSTS","ColumnSeries","Array","isArray","map","tooltipText","tooltipHTML","categoryX","valueY","dataItems","locations","tooltip","pointerOrientation","column","cornerRadiusTopLeft","cornerRadiusTopRight","fillOpacity","_cfg$bullet","bulletConfig","ColumnSeries_objectWithoutProperties","Bullets","adapter","Object","keys","forEach","_cfg$adapter$type","_len","arguments","length","args","_key","apply","concat","const_series","COLUMN_SERIES","STACKED_COLUMN_SERIES","PIE_SERIES","StackedColumnSeries","stroke","stacked","valueYShow","StackedColumnSeries_objectWithoutProperties","PieSeries","radiusValue","PieSeries_objectWithoutProperties","AllSeries","SERIES_CONSTS","DruvaCharts","charts_classCallCheck","validateConfig","initConfigFactory","initChart","JSON","parse","err","Error","_typeof","document","querySelector","condid","configFactory","_configFactory$chartC","chartConfig","Charts","addSeries","addLegend","_configFactory$series","seriesConfig","Series","legendConfig","Legends","am4themes_animated","const_map","WORLD_MAP","WORLD_HEAT_MAP","WorldMapSeries","WorldMapHeatSeries","MAPS","maps_configStore_classCallCheck","configStore_objectWithoutProperties","WorldMap","WorldMap_classCallCheck","WorldMap_possibleConstructorReturn","_MapInterface","am4maps","projection","Miller","getMapConfig","getMapObj","addZoomControl","zoomControl","addHomeButton","callBack","homeButton","goHome","icon","path","marginBottom","parent","insertBefore","plusButton","AllMaps","MAP_CONSTS","maps_const_series","WORLD_MAP_SERIES","USA_MAP_SERIES","INDIA_MAP_SERIES","DRILL_DOWN_WORLD_SERIES","IMAGE_SERIES","DRILL_DOWN_COUNTRY_SERIES","WorldSeries","geodata","am4geodata_worldLow","worldSeries","SERIES_CONST","exclude","useGeodata","worldTemplate","mapPolygons","lastSelected","mapColor","nonScalingStroke","states","create","hoverColor","heatRules","_config$heatRules","legendMinValue","legendMaxValue","colorMin","colorMax","legendAlign","legendVAlign","legendRotation","property","target","brighten","heatLegend","chartContainer","createChild","valign","align","orientation","labels","fontSize","markerCount","minRange","axisRanges","minValue","maxRange","maxValue","onZoom","ev","isActive","zoomToMapObject","IndiaSeries","indiaSeries","am4geodata_indiaLow","indiaPolygonTemplate","hs","USASeries","usaSeries","am4geodata_usaLow","usPolygonTemplate","DrillDownWorldSeries","countrySeries","hide","geodataSource","show","countryPolygon","strokeOpacity","targetMap","dataItem","dataContext","isHover","url","load","ImageSeries","imageSeries","imageSeriesTemplate","mapImages","circle","scale","getFor","imagePath","propertyFields","latitude","longitude","horizontalCenter","verticalCenter","height","nonScaling","background","setStateOnChildren","SERIES","DruvaMapsFactory","createMap","druvaMap","initMap","maps_typeof","_configFactory$mapCon","mapConfig","Maps","maps_objectWithoutProperties","appTittle","innerHTML","stackedColConfig","CHART_SERIES","format","CHART_BULLETS","dy","CHART_LEGENDS","position","vAlign","chart1","DruvaChart","chartData","stackedColumnData","xAxesTemplate","rotation","colConfig","index","chart2","columnSeriesData","setTimeout","activityData","activityChartConfig","alert","chart3","pieChartConfig","pieChart","pieChartData","InitChart","MAP_SERIES","stringify","mapData","USData","worldData","heatMapConfig","console","log","heatMap","capitalsMapConfig","capitalsMap","capitalsData","drillDownHeatMapConfig","mapSeries","visible","drillDownHeatMap","drillDownMapData","indexOf","InitMap"],"mappings":"4k3BAOeA,GACXC,oBAPwB,sBAQxBC,4BAPgC,8BAQhCC,UAPc,aCAZC,EAA4BC,WAAaC,OAC3CC,GAAIF,WAAaG,WACjBC,KAAMJ,WAAaG,WACnBE,MAAOL,WAAaC,OAChBK,IAAKN,WAAaG,WAClBI,IAAKP,WAAaG,aAEtBK,OAAQR,WAAaC,OACjBG,KAAMJ,WAAaG,WACnBM,KAAMT,UAAYG,WAAWO,GAAGV,WAAaC,OACzCU,MAAOX,WAAaG,WACpBS,KAAMZ,WAAaG,WACnBU,MAAOb,WAAaG,gBAG5BW,OAAQd,WAAaG,WAAWF,OAC5BG,KAAMJ,WAAaG,eAIrBY,EAAqBf,WAAaC,OACpCC,GAAIF,WAAaG,WACjBC,KAAMJ,WAAaG,WACnBK,OAAQR,WAAaC,OACjBG,KAAMJ,WAAaG,WACnBM,KAAMT,UAAYG,WAAWO,GAAGV,WAAaC,OACzCU,MAAOX,WAAaG,WACpBS,KAAMZ,WAAaG,WACnBU,MAAOb,WAAaG,kBAKnBa,EACA,SAACC,GACN,OAAOA,EAAOb,MACV,KAAKc,EAAOrB,4BACR,OAAOE,EAA0BoB,YAAYF,GACjD,KAAKC,EAAOtB,oBACR,OAAOmB,EAAmBI,YAAYF,GAC1C,QACI,OAAOlB,gBC5CFqB,aAEjB,SAAAA,EAAYH,gGAAQI,CAAAC,KAAAF,GAChBE,KAAKL,0BAGTM,0BACI,OAAOD,KAAKL,oBAGhBO,uBACI,OAAOF,KAAKG,mBAGhBC,kBAASC,GACLL,KAAKG,MAAME,KAAOA,eAGtBC,qBACkBN,KAAKG,MAAMI,MAAMC,SAAS,GAClCC,SAASC,UAAW,eAG9BC,qBACkBX,KAAKG,MAAMS,MAAMJ,SAAS,GAClCC,SAASC,UAAW,eAG9BG,gCACIb,KAAKG,MAAMjB,OAAO4B,QAAQC,SAASC,MAAQC,QAAQC,QAAQ,iBAG/DC,8BACkBnB,KAAKG,MAAMI,MAAMC,SAAS,GAClCC,SAASW,KAAKL,SAASL,UAAW,eAG5CW,8BACkBrB,KAAKG,MAAMS,MAAMJ,SAAS,GAClCC,SAASW,KAAKL,SAASL,UAAW,eAG5CY,sBAAanB,GACTH,KAAKG,MAAMoB,WAAa,IAAIN,QAAQO,uBAGxCC,sBAAatB,GACTH,KAAKG,MAAMuB,WAAa,IAAIT,QAAQO,oBC3CvBG,cACnB,SAAAA,EAAYhC,gGAAQiC,CAAA5B,KAAA2B,GAAA,IAAAE,mKAAAC,CAAA9B,KAClB+B,EAAAC,KAAAhC,KAAML,IACFQ,EAAQc,IAAetB,EAAOf,GAAIqD,KAFpB,OAGlB9B,EAAM+B,YAAYC,WAAWC,QAAU,EACvCjC,EAAMkC,OAAOC,KAAO,EACpBnC,EAAMoC,QAAQ,GAAI,GAAI,GAAI,IAC1BpC,EAAMqC,sBAAuB,EAEVrC,EAAMI,MAAMkC,KAAK,IAAIR,KAC3BS,WAAWC,SAAWhD,EAAOiD,MAAMD,SAEhCxC,EAAMS,MAAM6B,KAAK,IAAIR,KAC3BY,iBAAkB,EAC5BhB,EAAK1B,MAAQA,EAbK0B,oVAgBpBiB,uBAAcC,GACZ/C,KAAKG,MAAMjB,OAAO8D,KAAK,SAACC,GACtBA,EAAEnC,QAAQC,SAASmC,gBAAkBjC,IAAyBkC,QAC9DF,EAAEnC,QAAQC,SAASqC,OAAOC,GAAG,MAAON,SApBKjD,OCC1BwD,cACnB,SAAAA,EAAY3D,gGAAQ4D,CAAAvD,KAAAsD,GAAA,IAAAzB,mKAAA2B,CAAAxD,KAClByD,EAAAzB,KAAAhC,KAAML,IACF+D,EAAe7B,EAAK1B,MAAMI,MAAMC,SAAS,GAC7CkD,EAAajD,SAASW,KAAKL,SAASL,UAAW,EAC/CgD,EAAajD,SAASkD,gBAAkB,GAExC,IAAIC,EAAY/B,EAAK1B,MAAMS,MAAMJ,SAAS,GANxB,OAOlBoD,EAAU5E,IAAMW,EAAOZ,MAAMC,IAC7B4E,EAAU3E,IAAMU,EAAOZ,MAAME,IAC7B2E,EAAUnD,SAASoD,SAAW,GAC9BD,EAAUnD,SAASW,KAAKL,SAASL,UAAW,EAC5CkD,EAAUnD,SAASC,UAAW,EAC9BkD,EAAUnD,SAASkD,gBAAkB,GAErC9B,EAAK1B,MAAM2D,aAAc,EAdPjC,2UADgCF,OCDjCoC,cACnB,SAAAA,EAAYpE,gGAAQqE,CAAAhE,KAAA+D,GAAA,IAAAlC,mKAAAoC,CAAAjE,KAClB+B,EAAAC,KAAAhC,KAAML,IACFQ,EAAQc,IAAetB,EAAOf,GAAIqD,KAFpB,OAGlB9B,EAAM+B,YAAYC,WAAWC,QAAU,EACvCjC,EAAMkC,OAAOC,KAAO,EACpBT,EAAK1B,MAAQA,EALK0B,oVAQpBqC,sBAAanB,GACX/C,KAAKG,MAAMjB,OAAO8D,KAAK,SAACC,GACtBA,EAAEkB,OAAOpD,SAASmC,gBAAkBjC,IAAyBkC,QAC7DF,EAAEkB,OAAOpD,SAASqC,OAAOC,GAAG,MAAON,kBAIvCqB,yBAAgBC,GACdrE,KAAKG,MAAMjB,OAAO8D,KAAK,SAACC,GAAD,OAAOA,EAAEkB,OAAOpD,SAASuD,aAAeD,QAjB7BvE,GCChCyE,KACNA,EAAUC,EAAalG,qBAAuBqD,EAC9C4C,EAAUC,EAAajG,6BAA+B+E,EACtDiB,EAAUC,EAAahG,WAAauF,EAErBQ,iQCVME,aACjB,SAAAA,EAAY9E,gGAAQ+E,CAAA1E,KAAAyE,GAChBzE,KAAKL,OAASA,qBAGlBgF,qBACI,OAAO3E,KAAKL,+CAGE,IAAAiF,EACqB5E,KAAKL,OAAhCf,EADMgG,EACNhG,GAAIG,EADE6F,EACF7F,MAAO6D,EADLgC,EACKhC,MACnB,OAFcgC,EACY9F,MACVF,KAAIG,QAAO6D,+CAGZ,IACPD,EAAa3C,KAAKL,OAAOiD,MAAzBD,SADOkC,EAEQ7E,KAAKL,OAAOT,OACnC,OAHe2F,EAEP/F,MACO6D,WAAUxD,KAHV0F,EAED1F,4CAKd,GAAGa,KAAKL,OAAOH,OAAQ,KAAAsF,EACe9E,KAAKL,OAAOH,OAC9C,OAFmBsF,EACXhG,4HADWiG,CAAAD,GAAA,UAIvB,OAAO,cCtBR,IAAME,GACXC,IAAK,SAAC9E,EAAO+E,GACsBA,EAAzBC,UADW,IACGC,yHADHC,CACcH,GADd,cAInB,IAAI,IAAII,KAFRnF,EAAMX,OAAS,IAAIyC,IACnB9B,EAAMjB,OAAO8D,KAAK,SAACC,GAAD,OAAOA,EAAEsC,eAAeJ,UAAYD,EAAIC,YAC3CC,EACbjF,EAAMX,OAAO8F,GAAOF,EAAOE,KCNlB9F,GACXgG,uBAH2B,0BCEzBC,KACNA,EAAWC,EAAcF,wBAA0BR,EAEpCS,QCHR,IAAME,GACXV,IAAK,SAAC/F,EAAQS,GAC6BA,EAAjCN,MAAiCM,EAA1BiG,WADQ,IACOR,yHADPS,CACkBlG,GADlB,uBAEnBmG,EAAS5G,EAAO6G,QAAQtD,KAAK,IAAIR,KAOrC,IAAI,IAAIqD,KANRQ,EAAOE,qBAAsB,EAC7BF,EAAOG,MAAMC,KAAOvG,EAAOiG,WAC3BE,EAAOK,UAAY,GACnBL,EAAOG,MAAMG,KAAOnF,IAActB,EAAON,OACzCyG,EAAOK,UAAY,EACnBL,EAAOO,OAAS,OACDjB,EACbU,EAAOG,MAAMX,GAAOF,EAAOE,GAG7B,OAAOQ,ICbIQ,GACXC,aAHiB,gBCCfC,KACNA,EAAWC,EAAcF,cAAgBZ,EAE1Ba,QCFR,IAAME,GACXzB,IAAK,SAAC9E,EAAOR,GACX,GAAGA,GAAUgH,MAAMC,QAAQjH,EAAOR,MAAO,KAC/BwD,EAAmBhD,EAAnBgD,SACR,OAD2BhD,EAATR,KACN0H,IAAI,SAAC3B,GAAQ,IACf4B,EAA4B5B,EAA5B4B,YAAaC,EAAe7B,EAAf6B,YAEf1H,EAAQ4B,IAAciE,EAAI7F,OAE5BH,EAASiB,EAAMjB,OAAOuD,KAAK,IAAIR,KAsBnC,GArBA/C,EAAO4B,QAAQC,SAASC,MAAQC,IAAgB,IAE7C6F,IACD5H,EAAO4B,QAAQC,SAAS+F,YAAcA,GAGrCC,IACD7H,EAAO4B,QAAQC,SAASgG,YAAcA,GAGxC7H,EAAOI,KAAO4F,EAAI5F,KAClBJ,EAAOwD,WAAWsE,UAAYrE,EAC9BzD,EAAOwD,WAAWuE,OAAS/B,EAAI3F,MAC/BL,EAAOgI,UAAUnG,SAASoG,UAAUH,UAAY,GAChD9H,EAAOkI,QAAQC,mBAAqB,WACpCnI,EAAO4B,QAAQC,SAASqF,KAAO/G,EAC/BH,EAAO4B,QAAQC,SAASuG,OAAOC,oBAAsB,GACrDrI,EAAO4B,QAAQC,SAASuG,OAAOE,qBAAuB,GACtDtI,EAAO4B,QAAQC,SAASuG,OAAOG,YAAc,GAG1CvC,EAAIY,OAAQ,KAAA4B,EACmBxC,EAAIY,OAA7BhH,EADM4I,EACN5I,KAAS6I,yHADHC,CAAAF,GAAA,SAEbG,EAAQ/I,GAAMmG,IAAI/F,EAAQyI,GAa5B,OATGzC,EAAI4C,SACLC,OAAOC,KAAK9C,EAAI4C,SAASG,QAAQ,SAACnJ,GAIhCI,EAAO4B,QAAQC,SAAS+G,QAAQ7C,IAAInG,EAHpB,WAAa,QAAAoJ,EAAAC,EAAAC,UAAAC,OAATC,EAAS3B,MAAAwB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATD,EAASC,GAAAH,UAAAG,GAC3B,OAAOL,EAAAhD,EAAI4C,QAAQhJ,IAAMkD,KAAlBwG,MAAAN,GAAuB,MAAvBO,OAAgCH,GAAMnI,SAM5CjB,OC3CAwJ,GACXC,cANkB,gBAOlBC,sBAN0B,wBAO1BC,WANe,cCAZ,IAAMC,GACT7D,IAAK,SAAC9E,EAAOR,GACX,GAAGA,GAAUgH,MAAMC,QAAQjH,EAAOR,MAAO,KAC/BwD,EAAmBhD,EAAnBgD,SACR,OAD2BhD,EAATR,KACN0H,IAAI,SAAC3B,GAEb,IAAM4B,EAAc5B,EAAI4B,YAClBC,EAAc7B,EAAI6B,YAClB1H,EAAQ4B,IAAciE,EAAI7F,OAE5BH,EAASiB,EAAMjB,OAAOuD,KAAK,IAAIR,KAiBnC,GAhBA/C,EAAOI,KAAO4F,EAAI5F,KAClBJ,EAAO6J,QAAS,EAChB7J,EAAO8J,SAAU,EACjB9J,EAAO4B,QAAQC,SAASC,MAAQC,IAAgB,IAChD/B,EAAO4B,QAAQC,SAAS+F,YAAcA,EACtC5H,EAAO4B,QAAQC,SAASgG,YAAcA,EACtC7H,EAAO4B,QAAQC,SAASqF,KAAO/G,EAC/BH,EAAO4B,QAAQC,SAASuG,OAAOG,YAAc,GAC7CvI,EAAOwD,WAAWsE,UAAYrE,EAC9BzD,EAAOwD,WAAWuE,OAAS/B,EAAI3F,MAC/BL,EAAOwD,WAAWuG,WAAa,eAC/B/J,EAAOgI,UAAUnG,SAASoG,UAAUH,UAAY,GAEhD9H,EAAOkI,QAAQC,mBAAqB,WAGjCnC,EAAIY,OAAQ,KAAA4B,EACqBxC,EAAIY,OAA7BhH,EADI4I,EACJ5I,KAAS6I,yHADLuB,CAAAxB,GAAA,SAEXG,EAAQ/I,GAAMmG,IAAI/F,EAAQyI,GAa9B,OATGzC,EAAI4C,SACHC,OAAOC,KAAK9C,EAAI4C,SAASG,QAAQ,SAACnJ,GAIlCI,EAAO4B,QAAQC,SAAS+G,QAAQ7C,IAAInG,EAHpB,WAAa,QAAAoJ,EAAAC,EAAAC,UAAAC,OAATC,EAAS3B,MAAAwB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATD,EAASC,GAAAH,UAAAG,GACzB,OAAOL,EAAAhD,EAAI4C,QAAQhJ,IAAMkD,KAAlBwG,MAAAN,GAAuB,MAAvBO,OAAgCH,GAAMnI,SAM9CjB,OC1CZ,IAAMiK,GACXlE,IAAK,SAAC9E,EAAOR,GACX,GAAGA,GAAUgH,MAAMC,QAAQjH,EAAOR,MAAO,KAC/BwD,EAAmBhD,EAAnBgD,SACR,OAD2BhD,EAATR,KACN0H,IAAI,SAAC3B,GAAQ,IACf4B,EAA4B5B,EAA5B4B,YAAaC,EAAe7B,EAAf6B,YAEjB7H,EAASiB,EAAMjB,OAAOuD,KAAK,IAAIR,KAkBnC,GAhBG6E,IACC5H,EAAOiF,OAAOpD,SAAS+F,YAAcA,GAGtCC,IACC7H,EAAOiF,OAAOpD,SAASgG,YAAcA,GAGzC7H,EAAOwD,WAAWC,SAAWA,EAC7BzD,EAAOwD,WAAWnD,MAAQ2F,EAAI3F,MAE3B2F,EAAIkE,cACHlK,EAAOwD,WAAW0G,YAAclE,EAAIkE,aAIrClE,EAAIY,OAAQ,KAAA4B,EACmBxC,EAAIY,OAA7BhH,EADM4I,EACN5I,KAAS6I,yHADH0B,CAAA3B,GAAA,SAEbG,EAAQ/I,GAAMmG,IAAI/F,EAAQyI,GAa5B,OATGzC,EAAI4C,SACLC,OAAOC,KAAK9C,EAAI4C,SAASG,QAAQ,SAACnJ,GAIhCI,EAAOiF,OAAOpD,SAAS+G,QAAQ7C,IAAInG,EAHnB,WAAa,QAAAoJ,EAAAC,EAAAC,UAAAC,OAATC,EAAS3B,MAAAwB,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATD,EAASC,GAAAH,UAAAG,GAC3B,OAAOL,EAAAhD,EAAI4C,QAAQhJ,IAAMkD,KAAlBwG,MAAAN,GAAuB,MAAvBO,OAAgCH,GAAMnI,SAM5CjB,OCxCToK,KAENA,EAAUC,EAAcZ,eAAiBjC,EACzC4C,EAAUC,EAAcX,uBAAyBE,EACjDQ,EAAUC,EAAcV,YAAcM,EAEvBG,4XCJME,aACjB,SAAAA,EAAY5K,EAAIe,GAIZ,mGAJoB8J,CAAAzJ,KAAAwJ,GACpB7J,KAAUf,MAAOe,GACjBK,KAAK0J,eAAe/J,GACpBK,KAAK2J,kBAAkBhK,GAChBK,KAAK4J,+BAGhBF,wBAAe/J,GACX,GAAsB,iBAAZA,EACN,IACIA,EAASkK,KAAKC,MAAMnK,GACtB,MAAOoK,GACL,MAAM,IAAIC,MAAM,6BAEK,iBAAnB,IAAOrK,EAAP,YAAAsK,EAAOtK,MACbA,EAASA,GAIb,IAAID,EAAeC,GACf,MAAM,IAAIqK,MAAM,yBAGpB,IAAIE,SAASC,cAAT,IAA2BxK,EAAOf,IAClC,MAAM,IAAIoL,MAAJ,mBAA6BI,OAAOxL,GAApC,2BAId+K,2BAAkBhK,GACdK,KAAKqK,cAAgB,IAAI5F,EAAc9E,gBAG3CiK,qBAAY,IAAAU,EACYtK,KAAKqK,cAAcE,YAAhCzL,EADCwL,EAAA,GACKpF,EADLoF,EAAA,GAEJnK,EAAQ,IAAIqK,EAAO1L,GAAMoG,GAI7B,OAHAlF,KAAKG,MAAQA,EAAMD,cACnBF,KAAKyK,YACLzK,KAAK0K,YACEvK,eAGXsK,qBAAY,IAAAE,EACY3K,KAAKqK,cAAcO,aAAhC9L,EADC6L,EAAA,GACKzF,EADLyF,EAAA,GAERE,EAAO/L,GAAMmG,IAAIjF,KAAKG,MAAO+E,gBAGjCwF,qBACI,IAAM/K,EAASK,KAAKqK,cAAcS,aAClC,GAAGnL,EAAQ,KACAb,EAAaa,EADb,GACMuF,EAAOvF,EADb,GAEPoL,EAAQjM,GAAMmG,IAAIjF,KAAKG,MAAO+E,kBC/C1CjE,IAAiB+J,KCVjB,IAGeC,GACXC,UAJc,YAKdC,eAJmB,mCCEjBC,EAAiB1M,WAAaC,OAChCC,GAAIF,WAAaG,WACjBC,KAAMJ,WAAaG,aAGjBwM,EAAqB3M,WAAaC,OACpCC,GAAIF,WAAaG,WACjBC,KAAMJ,WAAaG,aAGVa,EACA,SAACC,GACN,OAAOA,EAAOb,MACV,KAAKwM,EAAKJ,UACN,OAAOE,EAAevL,YAAYF,GACtC,KAAK2L,EAAKH,eACN,OAAOE,EAAmBxL,YAAYF,GAC1C,QACI,OAAOyL,EAAevL,YAAYF,8PCrB7B8E,aACjB,SAAAA,EAAY9E,gGAAQ4L,CAAAvL,KAAAyE,GAChBzE,KAAKL,OAASA,qBAGlBgF,qBACI,OAAO3E,KAAKL,6CAGA,IAAAiF,EACS5E,KAAKL,OAAlBf,EADIgG,EACJhG,GACR,OAFYgG,EACA9F,MACIF,4CAIhB,OAAOoB,KAAKL,OAAOT,4CAInB,GAAGc,KAAKL,OAAOH,OAAQ,KAAAsF,EACe9E,KAAKL,OAAOH,OAC9C,OAFmBsF,EACXhG,4HADW0M,CAAA1G,GAAA,UAIvB,OAAO,kBCnBM2G,cACjB,SAAAA,EAAY9L,gGAAQ+L,CAAA1L,KAAAyL,GAAA,IAAA5J,mKAAA8J,CAAA3L,KAChB4L,EAAA5J,KAAAhC,KAAML,IACFkH,EAAM5F,IAAetB,EAAOf,GAAIiN,KAFpB,OAGhBhF,EAAIiF,WAAa,IAAID,IAAoBE,OACzClK,EAAKgF,IAAMA,EAJKhF,4dCApB4I,qBACI,MAAM,IAAIT,MAAM,mDAGpBU,qBACI,MAAM,IAAIV,MAAM,mDAGpBgC,wBACI,OAAOhM,KAAKL,oBAGhBsM,qBACI,OAAOjM,KAAK6G,iBAGhBzG,kBAASd,EAAMe,GACS,iBAAVf,GACNU,KAAK6G,IAAI3H,OAAO8D,KAAK,SAACC,GACfA,EAAE3D,OAASA,IACV2D,EAAE5C,KAAOA,kBAMzB6L,0BACIlM,KAAK6G,IAAIsF,YAAc,IAAIN,iBAG/BO,uBAAcC,GACVrM,KAAKkM,iBACL,IAAIrF,EAAM7G,KAAK6G,IACXyF,EAAa,IAAIrL,IACjBqL,EAAWlJ,OAAOC,GAAG,MAAO,WAC5BwD,EAAI0F,SACmB,mBAAbF,GACNA,EAASrK,KAAK,KAAM6E,KAI5ByF,EAAWE,KAAO,IAAIvL,IACtBqL,EAAW/J,QAAQ,EAAG,EAAG,EAAG,GAC5B+J,EAAWtL,MAAQ,GACnBsL,EAAWE,KAAKC,KAAO,kFACvBH,EAAWI,aAAe,GAC1BJ,EAAWK,OAAS3M,KAAK6G,IAAIsF,YAC7BG,EAAWM,aAAa5M,KAAK6G,IAAIsF,YAAYU,mBCjD/CC,KACNA,EAAQC,EAAW7B,WAAaO,EAEjBqB,QCEAE,GACXC,iBATqB,mBAUrBC,eATmB,iBAUnBC,iBATqB,mBAUrBC,wBAT4B,0BAU5BC,aATiB,eAUjBC,0BAT8B,sCCArBC,GACTtI,IAAK,SAAC4B,EAAKlH,GAAW,IACVmH,EAA6BnH,EAA7BmH,YAAaC,EAAgBpH,EAAhBoH,YACrBF,EAAI2G,QAAUC,IACd,IAAIC,EAAc7G,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACtC6B,EAAYpO,KAAMqO,EAAaV,iBAC/BS,EAAYE,QAAUjO,EAAOiO,QAC7BF,EAAYG,YAAa,EAEzB,IAAIC,EAAgBJ,EAAYK,YAAYhN,SAEzC+F,IACCgH,EAAchH,YAAcA,GAG7BC,IACC+G,EAAc/G,YAAcA,GAGhC,IAuCQiH,EAvCJC,EAAWtO,EAAON,OAAS4B,IAActB,EAAON,QAAUwH,EAAIxE,OAAO7B,SAAS,GAOlF,GANAsN,EAAc1H,KAAO6H,EACrBH,EAAcI,kBAAmB,EAEhBJ,EAAcK,OAAOC,OAAO,SAClCjM,WAAWiE,KAAOzG,EAAO0O,YAAcpN,IAActB,EAAO0O,aAAepN,IAAc,WAEjGtB,EAAO2O,UAAW,KAAAC,EACyF5O,EAAO2O,UAAzGE,EADSD,EACTC,eAAgBC,EADPF,EACOE,eAAgBC,EADvBH,EACuBG,SAAUC,EADjCJ,EACiCI,SADjCJ,EAC2CK,YAD3CL,EACwDM,aADxDN,EACsEO,eAEvFpB,EAAYY,UAAU7L,MAClBsM,SAAU,OACVC,OAAQlB,EACR9O,IAAKiP,EAASgB,SAASP,GAAY,IACnCzP,IAAKgP,EAASgB,SAASN,GAAY,KAIvC,IAAIO,EAAarI,EAAIsI,eAAeC,YAAYvD,KAChDqD,EAAWG,OAAS,SACpBH,EAAWI,MAAQ,OACnBJ,EAAWlO,MAAQC,IAAgB,IACnCiO,EAAWhQ,OAASwO,EACpBwB,EAAWK,YAAc,aACzBL,EAAW3M,QAAQ,GAAI,GAAI,GAAI,IAC/B2M,EAAWtL,UAAUnD,SAAS+O,OAAOzO,SAAS0O,SAAW,GACzDP,EAAWtL,UAAUnD,SAASkD,gBAAkB,GAChDuL,EAAWQ,YAAc,EAGzB,IAAIC,EAAWT,EAAWtL,UAAUgM,WAAWxB,SAC/CuB,EAASpQ,MAAQ2P,EAAWW,SAC5BF,EAAS1J,MAAMC,KAAOsI,EACtB,IAAIsB,EAAWZ,EAAWtL,UAAUgM,WAAWxB,SAC/C0B,EAASvQ,MAAQ2P,EAAWa,SAC5BD,EAAS7J,MAAMC,KAAOuI,EAGvB9O,EAAOqQ,SAENlC,EAAc1K,OAAOC,GAAG,MAAO,SAAS4M,GAChCjC,IACAA,EAAakC,UAAW,GAE5BD,EAAGjB,OAAO9P,OAAOiB,MAAMgQ,gBAAgBF,EAAGjB,QACtChB,IAAiBiC,EAAGjB,SACpBhB,EAAeiC,EAAGjB,QAGM,mBAAlBrP,EAAOqQ,QACbrQ,EAAOqQ,OAAOhO,KAAK,KAAM6E,KAKxBiH,EAAcK,OAAOC,OAAO,UAClCjM,WAAWiE,KAAOS,EAAIxE,OAAO7B,SAAS,GAEhCsN,EAAcK,OAAOC,OAAO,SAClCjM,WAAWiE,KAAOS,EAAIxE,OAAO7B,SAAS,eC9ExC4P,GACTnL,IAAK,SAAC4B,EAAKlH,GAGP,IAAI0Q,EAAcxJ,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACtCwE,EAAY/Q,KAAOqO,EAAaR,iBAEhCkD,EAAY7C,QAAU8C,IACtB,IAAIC,EAAuBF,EAAYtC,YAAYhN,SACnDwP,EAAqBzJ,YAAc,SACnCyJ,EAAqBnK,KAAOzG,EAAON,OAAS4B,IAActB,EAAON,QAAUwH,EAAIxE,OAAO7B,SAAS,GAC/F+P,EAAqBrC,kBAAmB,EAGxCsC,GAAKD,EAAqBpC,OAAOC,OAAO,SACxCoC,GAAGrO,WAAWiE,KAAOzG,EAAO0O,YAAcpN,IAActB,EAAO0O,aAAepN,IAAc,sBCfvFwP,IACTxL,IAAK,SAAC4B,EAAKlH,GAAW,IACVmH,EAA6BnH,EAA7BmH,YAAaC,EAAgBpH,EAAhBoH,YACjB2J,EAAY7J,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACpC6E,EAAUpR,KAAOqO,EAAaT,eAC9BwD,EAAUlD,QAAUmD,IACpBD,EAAU7C,YAAa,EACvB,IAAI+C,EAAoBF,EAAU3C,YAAYhN,SAE3C+F,IACC8J,EAAkB9J,YAAcA,GAGjCC,IACC6J,EAAkB7J,YAAcA,GAGpC6J,EAAkBxK,KAAOzG,EAAON,OAAS4B,IAActB,EAAON,QAAUwH,EAAIxE,OAAO7B,SAAS,GAC5FoQ,EAAkB1C,kBAAmB,EAG5B0C,EAAkBzC,OAAOC,OAAO,SACtCjM,WAAWiE,KAAOzG,EAAO0O,YAAcpN,IAActB,EAAO0O,aAAepN,IAAc,aCrB7F,IAAM4P,IACT5L,IAAK,SAAC4B,EAAKlH,GAAW,IACVmH,EAA6BnH,EAA7BmH,YAAaC,EAAgBpH,EAAhBoH,YACrBF,EAAI2G,QAAUC,IACd,IAAIC,EAAc7G,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACtC6B,EAAYpO,KAAMqO,EAAaV,iBAC/BS,EAAYE,QAAUjO,EAAOiO,QAC7BF,EAAYG,YAAa,EACzBH,EAAYhL,WAAWnD,MAAQI,EAAOJ,MAEtC,IAAIuO,EAAgBJ,EAAYK,YAAYhN,SAEzC+F,IACCgH,EAAchH,YAAcA,GAG7BC,IACC+G,EAAc/G,YAAcA,GAGhC,IAAIkH,EAAWtO,EAAON,OAAS4B,IAActB,EAAON,QAAUwH,EAAIxE,OAAO7B,SAAS,GAOlF,GANAsN,EAAc1H,KAAO6H,EACrBH,EAAcI,kBAAmB,EAEhBJ,EAAcK,OAAOC,OAAO,SAClCjM,WAAWiE,KAAOzG,EAAO0O,YAAcpN,IAActB,EAAO0O,aAAepN,IAAc,WAEjGtB,EAAO2O,UAAW,KAAAC,EAC8C5O,EAAO2O,UAA9DE,EADSD,EACTC,eAAgBC,EADPF,EACOE,eAAgBC,EADvBH,EACuBG,SAAUC,EADjCJ,EACiCI,SAElDjB,EAAYY,UAAU7L,MAClBsM,SAAU,OACVC,OAAQlB,EACR9O,IAAKiP,EAASgB,SAASP,GAAY,IACnCzP,IAAKgP,EAASgB,SAASN,GAAY,KAIvC,IAAIO,EAAarI,EAAIsI,eAAeC,YAAYvD,KAChDqD,EAAWG,OAAS,SACpBH,EAAWI,MAAQ,OACnBJ,EAAWlO,MAAQC,IAAgB,IACnCiO,EAAWhQ,OAASwO,EACpBwB,EAAWK,YAAc,aACzBL,EAAW3M,QAAQ,GAAI,GAAI,GAAI,IAC/B2M,EAAWtL,UAAUnD,SAAS+O,OAAOzO,SAAS0O,SAAW,GACzDP,EAAWtL,UAAUnD,SAASkD,gBAAkB,GAChDuL,EAAWQ,YAAc,EAGzB,IAAIC,EAAWT,EAAWtL,UAAUgM,WAAWxB,SAC/CuB,EAASpQ,MAAQ2P,EAAWW,SAC5BF,EAAS1J,MAAMC,KAAOsI,EACtB,IAAIsB,EAAWZ,EAAWtL,UAAUgM,WAAWxB,SAC/C0B,EAASvQ,MAAQ2P,EAAWa,SAC5BD,EAAS7J,MAAMC,KAAOuI,EA4B1B,IAAIqC,EAAgBjK,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACxCiF,EAAcjD,YAAa,EAC3BiD,EAAcxR,KAAOqO,EAAaL,0BAClCwD,EAAcC,OACdD,EAAcE,cAAc5N,OAAOC,GAAG,OAAQ,SAAS4M,GACnDa,EAAcG,SAGlB,IAAIC,EAAiBJ,EAAc/C,YAAYhN,SAC/CmQ,EAAepK,YAAc,SAC7BoK,EAAehD,kBAAmB,EAClCgD,EAAeC,cAAgB,GAC/BD,EAAe9K,KAAOnF,IAAc,QAE3BiQ,EAAe/C,OAAOC,OAAO,SACnCjM,WAAWiE,KAAOS,EAAIxE,OAAO7B,SAAS,GAGzCsN,EAAc1K,OAAOC,GAAG,MAAO,SAAS4M,GACvBA,EAAGjB,OAAO9P,OAChBiB,MAAMgQ,gBAAgBF,EAAGjB,QAChC,IAAIoC,EAAYnB,EAAGjB,OAAOqC,SAASC,YAAYzK,IAC3CuK,IACAnB,EAAGjB,OAAOuC,SAAU,EACpBT,EAAcE,cAAcQ,IAAM,+CAAiDJ,EAAU,GAAK,QAClGN,EAAcE,cAAcS,OACzB9R,EAAOqQ,QAAmC,mBAAlBrQ,EAAOqQ,QAC9BrQ,EAAOqQ,OAAOhO,KAAK,KAAM6E,EAAKoJ,EAAGjB,aChHxC0C,IACTzM,IAAK,SAAC4B,EAAKlH,GAEP,IAAIgS,EAAc9K,EAAI3H,OAAOuD,KAAK,IAAIoJ,KACtC8F,EAAYrS,KAAOqO,EAAaN,aAGhC,IAAIuE,EAAsBD,EAAYE,UAAU9Q,SAC5C+Q,EAASF,EAAoBxC,YAAYnO,KAC7C6Q,EAAOC,MAAQ,GACfD,EAAO1L,MAAO,IAAInF,KAA4B+Q,OAAO,yBACrDF,EAAOrF,KAAO9M,EAAOsS,UAIrBL,EAAoBM,eAAeC,SAAWxS,EAAOwS,SACrDP,EAAoBM,eAAeE,UAAYzS,EAAOyS,UAEtDR,EAAoBS,iBAAmB,SACvCT,EAAoBU,eAAiB,SACrCV,EAAoBtC,MAAQ,SAC5BsC,EAAoBvC,OAAS,SAC7BuC,EAAoB5Q,MAAQ,EAC5B4Q,EAAoBW,OAAS,EAC7BX,EAAoBY,YAAa,EAC9B7S,EAAOmH,cACN8K,EAAoB9K,YAAcnH,EAAOmH,aAG1CnH,EAAOoH,cACN6K,EAAoB9K,YAAcnH,EAAOoH,aAG7C6K,EAAoBxL,KAAOnF,IAAc,QACzC2Q,EAAoBa,WAAWhL,YAAc,EAC7CmK,EAAoBa,WAAWrM,KAAOnF,IAAc,WACpD2Q,EAAoBc,oBAAqB,EACzCd,EAAoBzD,OAAOC,OAAO,WClCpC9E,MACNA,GAAUqJ,EAAO1F,kBAAoBM,EACrCjE,GAAUqJ,EAAOzF,gBAAkBuD,GACnCnH,GAAUqJ,EAAOxF,kBAAoBiD,EACrC9G,GAAUqJ,EAAOvF,yBAA2ByD,GAC5CvH,GAAUqJ,EAAOtF,cAAgBqE,GAElBpI,uNCLfrI,IAAiB+J,SA+DX4H,GAAmB,qJA3DrBC,mBAAUjU,EAAIe,GACVA,EAAOf,GAAKA,EACZoB,KAAK0J,eAAe/J,GACpB,IAAI0K,EAAgBrK,KAAK2J,kBAAkBhK,GACvCmT,EAAW9S,KAAK+S,QAAQ1I,GAK5B,OAHArK,KAAKyK,UAAUqI,EAAUzI,GACzBrK,KAAK0K,UAAUoI,EAAUzI,GAElByI,eAGXpJ,wBAAe/J,GACX,GAAsB,iBAAZA,EACN,IACIA,EAASkK,KAAKC,MAAMnK,GACtB,MAAOoK,GACL,MAAM,IAAIC,MAAM,2BAEK,iBAAnB,IAAOrK,EAAP,YAAAqT,GAAOrT,MACbA,EAASA,GAIb,IAAID,EAAeC,GACf,MAAM,IAAIqK,MAAM,uBAGpB,IAAIE,SAASC,cAAT,IAA2BxK,EAAOf,IAClC,MAAM,IAAIoL,MAAJ,mBAA6BI,OAAOxL,GAApC,2BAId+K,2BAAkBhK,GACd,OAAO,IAAI8E,EAAc9E,gBAG7BoT,iBAAQ1I,GAAe,IAAA4I,EACC5I,EAAc6I,UAA3BpU,EADYmU,EAAA,GACN/N,EADM+N,EAAA,GAEnB,OAAO,IAAIE,EAAKrU,GAAMoG,gBAG1BuF,mBAAUqI,EAAUzI,GACHA,EAAcO,aACtB3C,QAAQ,SAAC/I,GAAW,IACbJ,EAAiBI,EAAjBJ,KAASoG,yHADIkO,CACIlU,GADJ,SAErB2L,GAAO/L,GAAMmG,IAAI6N,EAAS7G,YAAa/G,kBAI/CwF,mBAAUoI,EAAUzI,GAChB,IAAM1K,EAAS0K,EAAcS,aAC7B,GAAGnL,EAAQ,KACAb,EAAaa,EADb,GACMuF,EAAOvF,EADb,GAEPoL,QAAQjM,GAAMmG,IAAI6N,EAAS7G,YAAa/G,0CCjEhDmO,GAAYnJ,SAASC,cAAc,WACvBD,SAASC,cAAc,oBACzBD,SAASC,cAAc,0BACrBD,SAASC,cAAc,4BAEvCkJ,GAAUC,UAAY,iCfIP,WAGX,IAAMC,GAEFzU,KAAM0L,EAAOjM,4BACbqE,OACID,SAAU,YAEd5D,OACEC,IAAK,EACLC,IAAK,KAEPC,QACIJ,KAAM0U,EAAa5K,sBACnBzJ,OACQE,MAAO,UACPoU,OAAQ,IACRnU,KAAM,4BACNyH,YAAa,+FACbxH,MAAO,WAGPF,MAAO,UACPoU,OAAQ,IACRnU,KAAM,0BACNyH,YAAa,+FACbxH,MAAO,WAGPF,MAAO,UACPoU,OAAQ,IACRnU,KAAM,wBACNyH,YAAa,+FACbxH,MAAO,WAGPF,MAAO,UACPoU,OAAQ,IACRnU,KAAM,wBACNyH,YAAa,+FACbxH,MAAO,SACPuG,QACIhH,KAAM4U,EAAcnN,aACpBX,WAAY,iBACZQ,KAAM,OACNuN,IAAK,GACLlE,SAAU,OAI1BjQ,QACIV,KAAM8U,EAAcpO,uBACpBqO,SAAU,QACVC,OAAQ,SACRvU,MAAO,WAGXwU,EAAS,IAAIC,EAAW,sBAAuBT,GAEnD,GAAGU,EAAUC,kBAAkB7L,OAAS,EAAE,CACtC,IAAM8L,EAAgBJ,EAAO7T,cAAcK,MAAMC,SAAS,GAAGC,SAAS+O,OAAOzO,SAC7EoT,EAAcC,UAAY,GAC1BD,EAAc9B,iBAAmB,SACjC8B,EAAc7B,eAAiB,SAEnCyB,EAAO3T,SAAS6T,EAAUC,mBAK1B,IAAMG,GAEHvV,KAAM0L,EAAOlM,oBACbsE,OACID,SAAU,WAEdzD,QACIJ,KAAM0U,EAAa7K,cACnBxJ,OACQE,MAAO,UACPoU,OAAQ,IACRnU,KAAM,4BACNwH,YAAa,iBACbvH,MAAO,SACPuI,SACC1B,KAAQ,SAACA,EAAM4I,EAAQ1J,EAAKnF,GAC3B,OAAOA,EAAMkC,OAAO7B,SAASwO,EAAOqC,SAASiD,aAO3DC,EAAS,IAAIP,EAAW,eAAgBK,GAC5CE,EAAOnU,SAAS6T,EAAUO,kBAC1BC,WAAW,kBAAMF,EAAOnU,SAAS6T,EAAUS,eAAe,KAGzD,IAAMC,GAEN7V,KAAM0L,EAAOlM,oBACbsE,OACID,SAAU,WAEdzD,QACIJ,KAAM0U,EAAa7K,cACnBxJ,OACQE,MAAO,UACPoU,OAAQ,IACRnU,KAAM,4BACNwH,YAAa,iBACbvH,MAAO,SACPuI,SACA1B,KAAQ,SAACA,EAAM4I,EAAQ1J,EAAKnF,GACxB,OAAG6O,EAAOqC,SAASpK,OAAS,IACjBhG,IAAc,WAElBA,IAAc,iBAQrCsT,EAAOzR,cAAc,SAASmN,GAC1B2E,MAAM,cAAgB3E,EAAGjB,OAAOqC,SAASrK,UAAY,KAAOiJ,EAAGjB,OAAOqC,SAASpK,UAGpF,IAAI4N,EAAS,IAAIb,EAAW,gBAAiBW,GAC7CE,EAAOvU,YACPuU,EAAOlU,YACPkU,EAAOxT,qBACPwT,EAAO1T,qBACP0T,EAAOzU,SAAS6T,EAAUS,cAIzB,IAAII,GAEDhW,KAAM0L,EAAOhM,UACboE,OACID,SAAU,WAEdzD,QACIJ,KAAM0U,EAAa3K,WACnB1J,OACQ4H,YAAa,6BACbxH,MAAO,QACP6J,YAAa,WAIxB5J,QACIV,KAAM8U,EAAcpO,uBACpBqO,SAAU,SACVC,OAAQ,SACR3O,UAAW,YAIhB4P,EAAW,IAAIf,EAAW,WAAYc,GAC1CC,EAAS3U,SAAS6T,EAAUe,cAC5BD,EAAS3Q,gBAAgB,GerK5B6Q,GCDe,WAEXhU,IAAiB+J,KACjB,IAAIkI,GACApU,KAAMqU,EAAKjI,UACXhM,SACIJ,KAAMoW,EAAWjI,iBACjBW,SAAU,MACV9G,YAAa,oBAGbhI,KAAMoW,EAAWhI,eACjBpG,YAAa,qBAIjBD,EAAM+L,GAAiBC,UAAU,WAAYK,GACjDrM,EAAIzG,SAAS8U,EAAWhI,eAAgBrD,KAAKC,MAAMD,KAAKsL,UAAUC,EAAQC,UAC1ExO,EAAIzG,SAAS8U,EAAWjI,iBAAkBpD,KAAKC,MAAMD,KAAKsL,UAAUC,EAAQE,aAC5EzO,EAAIuF,gBAGJ,IAAImJ,GACAzW,KAAMqU,EAAKjI,UACXhM,SACIJ,KAAMoW,EAAWjI,iBACjBW,SAAU,MACV9G,YAAa,kBACbzH,MAAO,UACPiP,WACII,SAAU,EACVC,UAAW,GACXH,eAAgB,IAChBC,eAAgB,KAEpBuB,OAAQ,SAACnJ,GACL2O,QAAQC,IAAI5O,OAKpB6O,EAAU9C,GAAiBC,UAAU,eAAgB0C,GACzDG,EAAQtV,SAAS8U,EAAWjI,iBAAkBpD,KAAKC,MAAMD,KAAKsL,UAAUC,EAAQE,aAChFI,EAAQxJ,iBACRwJ,EAAQtJ,gBAGR,IAAIuJ,GACA7W,KAAMqU,EAAKjI,UACXhM,SACIJ,KAAMoW,EAAWjI,iBACjBW,SAAU,MACVvO,MAAO,UACP2Q,OAAQ,SAACnJ,EAAK3H,GACVsW,QAAQC,IAAI5O,GACZ2O,QAAQC,IAAIvW,MAIhBJ,KAAMoW,EAAW7H,aACjB8E,SAAU,WACVC,UAAW,YACXH,UAAW,qPACXnL,YAAa,UACbC,YAAa,MAIjB6O,EAAchD,GAAiBC,UAAU,cAAe8C,GAC5DC,EAAYxV,SAAS8U,EAAW7H,aAAcxD,KAAKC,MAAMD,KAAKsL,UAAUU,MACxED,EAAY1J,iBACZ0J,EAAYxJ,gBAGZ,IAAI0J,GACAhX,KAAMqU,EAAKjI,UACXhM,SACIJ,KAAMoW,EAAW9H,wBACjBQ,SAAU,MACV9G,YAAa,kBACbzH,MAAO,UACPE,MAAO,SACP+O,WACII,SAAU,EACVC,UAAW,GACXH,eAAgB,IAChBC,eAAgB,KAEpBuB,OAAQ,SAACnJ,EAAKmI,GACVnI,EAAI3H,OAAO8D,KAAK,SAAC+S,GACVA,EAAUzW,OAAS4V,EAAW7H,eACzB0I,EAAUC,SACVD,EAAU9E,OAEd8E,EAAU1V,KAAOwJ,KAAKC,MAAMD,KAAKsL,UAAUU,WAMvD/W,KAAMoW,EAAW7H,aACjB8E,SAAU,WACVC,UAAW,YACXH,UAAW,qPACXnL,YAAa,UACbC,YAAa,MAKjBkP,EAAmBrD,GAAiBC,UAAU,wBAAyBiD,GAC3EG,EAAiB7V,SAAS8U,EAAWjI,iBAAkBpD,KAAKC,MAAMD,KAAKsL,UAAUe,MACjFD,EAAiB/J,iBACjB+J,EAAiB7J,cAAc,SAACvF,GAC5BA,EAAI3H,OAAO8D,KAAK,SAAC+S,IACTb,EAAW7H,aAAc6H,EAAW5H,2BAA2B6I,QAAQJ,EAAUzW,OAAS,GAC1FyW,EAAUhF,WDlH1BqF","file":"app.75c76075.js","sourcesContent":["// Charts\r\nconst COLUMN_SERIES_CHART = \"COLUMN_SERIES_CHART\";\r\nconst STACKED_COLUMN_SERIES_CHART = \"STACKED_COLUMN_SERIES_CHART\";\r\nconst PIE_CHART = \"PIE_CHART\";\r\n\r\n\r\n\r\nexport default {\r\n    COLUMN_SERIES_CHART,\r\n    STACKED_COLUMN_SERIES_CHART,\r\n    PIE_CHART\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import * as yup from 'yup';\r\nimport CHARTS from './const/chart';\r\n\r\nconst stackedColumnSeriesSchema = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required(),\r\n    yAxis: yup.object().shape({\r\n        min: yup.number().required(),\r\n        max: yup.number().required(),\r\n    }),\r\n    series: yup.object().shape({\r\n        type: yup.string().required(),\r\n        list: yup.array().required().of(yup.object().shape({\r\n            color: yup.string().required(),\r\n            name: yup.string().required(),\r\n            value: yup.string().required(),\r\n        }))\r\n    }),\r\n    legend: yup.object().required().shape({\r\n        type: yup.string().required()\r\n    })\r\n});\r\n\r\nconst columnSeriesSchema = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required(),\r\n    series: yup.object().shape({\r\n        type: yup.string().required(),\r\n        list: yup.array().required().of(yup.object().shape({\r\n            color: yup.string().required(),\r\n            name: yup.string().required(),\r\n            value: yup.string().required(),\r\n        }))\r\n    })\r\n});\r\n\r\nexport const schema = {\r\n    isValid: (config) => {\r\n        switch(config.type) {\r\n            case CHARTS.STACKED_COLUMN_SERIES_CHART:\r\n                return stackedColumnSeriesSchema.isValidSync(config);\r\n            case CHARTS.COLUMN_SERIES_CHART:\r\n                return columnSeriesSchema.isValidSync(config);\r\n            default:\r\n                return stackedColumnSeriesSchema;   \r\n        }\r\n    }\r\n}","export default class ChartInterface {\r\n\r\n    constructor(config) {\r\n        this.config;\r\n    }\r\n\r\n    getChartConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    getChartObj(){\r\n        return this.chart;\r\n    }\r\n\r\n    bindData(data) {\r\n        this.chart.data = data;\r\n    }\r\n\r\n    hideXAxes() {\r\n        const xAxes = this.chart.xAxes.getIndex(0);\r\n        xAxes.renderer.disabled = true;\r\n    }\r\n    \r\n    hideYAxes() {\r\n        const yAxes = this.chart.yAxes.getIndex(0);\r\n        yAxes.renderer.disabled = true;\r\n    }\r\n\r\n    setSeriesColumnWidth() {\r\n        this.chart.series.columns.template.width = am4core.percent(70);\r\n    }\r\n\r\n    hidexAxesGridLines() {\r\n        const xAxes = this.chart.xAxes.getIndex(0);\r\n        xAxes.renderer.grid.template.disabled = true;\r\n    }\r\n\r\n    hideYAxesGridLines() {\r\n        const yAxes = this.chart.yAxes.getIndex(0);\r\n        yAxes.renderer.grid.template.disabled = true;\r\n    }\r\n\r\n    addScrolBarX(chart) {\r\n        this.chart.scrollbarX = new am4core.Scrollbar();\r\n    }\r\n\r\n    addScrolBarY(chart) {\r\n        this.chart.scrollbarY = new am4core.Scrollbar();\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\n\r\nexport default class ColumnSeriesChart extends ChartInterface {\r\n  constructor(config) {\r\n    super(config);\r\n    let chart = am4core.create(config.id, am4charts.XYChart);\r\n    chart.hiddenState.properties.opacity = 0;\r\n    chart.colors.step = 2;\r\n    chart.padding(30, 30, 10, 30);\r\n    chart.simplifiedProcessing = true;\r\n\r\n    let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n    categoryAxis.dataFields.category = config.xAxis.category;\r\n  \r\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n    valueAxis.calculateTotals = true;\r\n    this.chart = chart;\r\n  }\r\n  \r\n  onColumnClick(callback) {\r\n    this.chart.series.each((s) => {\r\n      s.columns.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n      s.columns.template.events.on(\"hit\", callback);\r\n    });\r\n  }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\nimport ColumnSeriesChart from \"./ColumnSeriesChart\";\r\n\r\nexport default class StackedColumnSeriesChart extends ColumnSeriesChart {\r\n  constructor(config) {\r\n    super(config);\r\n    let categoryAxis = this.chart.xAxes.getIndex(0);\r\n    categoryAxis.renderer.grid.template.disabled = true;\r\n    categoryAxis.renderer.minGridDistance = 20;\r\n  \r\n    let valueAxis = this.chart.yAxes.getIndex(0);\r\n    valueAxis.min = config.yAxis.min;\r\n    valueAxis.max = config.yAxis.max;\r\n    valueAxis.renderer.minWidth = 10;\r\n    valueAxis.renderer.grid.template.disabled = true;\r\n    valueAxis.renderer.disabled = true;\r\n    valueAxis.renderer.minGridDistance = 10;\r\n\r\n    this.chart.maskBullets = false;\r\n  }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport ChartInterface from \"./ChartInterface\";\r\n\r\nexport default class PieChart extends ChartInterface {\r\n  constructor(config) {\r\n    super(config);\r\n    let chart = am4core.create(config.id, am4charts.PieChart);\r\n    chart.hiddenState.properties.opacity = 0;\r\n    chart.colors.step = 3;\r\n    this.chart = chart;\r\n  }\r\n  \r\n  onSliceClick(callback) {\r\n    this.chart.series.each((s) => {\r\n      s.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n      s.slices.template.events.on(\"hit\", callback);\r\n    });\r\n  }\r\n\r\n  setCornerRadius(radius) { \r\n    this.chart.series.each((s) => s.slices.template.cornerRadius = radius);\r\n  }\r\n}","import ColumnSeriesChart from './ColumnSeriesChart';\r\nimport CHART_CONSTS from '../../const/chart';\r\nimport StackedColumnSeriesChart from './StackedColumnChart';\r\nimport PieChart from './PieChart';\r\n\r\nconst AllCharts = {}\r\nAllCharts[CHART_CONSTS.COLUMN_SERIES_CHART] = ColumnSeriesChart;\r\nAllCharts[CHART_CONSTS.STACKED_COLUMN_SERIES_CHART] = StackedColumnSeriesChart;\r\nAllCharts[CHART_CONSTS.PIE_CHART] = PieChart;\r\n\r\nexport default AllCharts;\r\n","export default class ConfigFactory {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    get chartConfig() {\r\n        const { id, yAxis, xAxis, type } = this.config;\r\n        return [type, { id, yAxis, xAxis }];\r\n    }\r\n\r\n    get seriesConfig() {\r\n        const { category } = this.config.xAxis;\r\n        const { type, list } = this.config.series;\r\n        return [type, {category, list}];\r\n    }\r\n\r\n    get legendConfig() {\r\n        if(this.config.legend) {\r\n            const { type, ...legendConfig } = this.config.legend;\r\n            return [type, legendConfig];\r\n        }\r\n        return null;\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n\r\nexport const LegendWithValueText = {\r\n  add: (chart, cfg) => {\r\n    const { valueText, ...others } = cfg;\r\n    chart.legend = new am4charts.Legend();\r\n    chart.series.each((s) => s.legendSettings.valueText = cfg.valueText)\r\n    for(let key in others) {\r\n      chart.legend[key] = others[key];\r\n    }\r\n  }\r\n}\r\n","// Legends\r\nconst LEGEND_WITH_VALUE_TEXT = \"LEGEND_WITH_VALUE_TEXT\";\r\n\r\nexport default {\r\n    LEGEND_WITH_VALUE_TEXT\r\n}","import {LegendWithValueText} from './LegendWithValueText';\r\nimport LEGEND_CONSTS from '../../const/legend';\r\n\r\nconst AllLegends = {}\r\nAllLegends[LEGEND_CONSTS.LEGEND_WITH_VALUE_TEXT] = LegendWithValueText\r\n\r\nexport default AllLegends;\r\n","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\n\r\nexport const LabelBullet = {\r\n  add: (series, config) => {\r\n    const { color, bulletText, ...others } = config;\r\n    let bullet = series.bullets.push(new am4charts.LabelBullet());\r\n    bullet.interactionsEnabled = false;\r\n    bullet.label.text = config.bulletText;\r\n    bullet.locationY = 0.5;\r\n    bullet.label.fill = am4core.color(config.color);;\r\n    bullet.locationY = 0;\r\n    bullet.layout = 'none'\r\n    for(let key in others) {\r\n      bullet.label[key] = others[key];\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n}","// Bullets\r\n\r\nconst LABEL_BULLET = \"LABEL_BULLET\";\r\n\r\nexport default {\r\n    LABEL_BULLET\r\n}","import {LabelBullet} from './LabelBullet';\r\nimport BULLET_CONSTS from '../../const/bullet';\r\n\r\nconst AllBullets = {}\r\nAllBullets[BULLET_CONSTS.LABEL_BULLET] = LabelBullet\r\n\r\nexport default AllBullets;\r\n","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const ColumnSeries ={ \r\n  add: (chart, config) => {\r\n    if(config && Array.isArray(config.list)) {\r\n      const { category, list } = config;\r\n      return list.map((cfg) => {\r\n        const { tooltipText, tooltipHTML} = cfg;\r\n\r\n        const color = am4core.color(cfg.color);\r\n    \r\n        let series = chart.series.push(new am4charts.ColumnSeries());\r\n        series.columns.template.width = am4core.percent(70);\r\n\r\n        if(tooltipText) {\r\n          series.columns.template.tooltipText = tooltipText;\r\n        }\r\n\r\n        if(tooltipHTML) {\r\n          series.columns.template.tooltipHTML = tooltipHTML;\r\n        }\r\n        \r\n        series.name = cfg.name;\r\n        series.dataFields.categoryX = category;\r\n        series.dataFields.valueY = cfg.value;\r\n        series.dataItems.template.locations.categoryX = 0.5;\r\n        series.tooltip.pointerOrientation = \"vertical\";\r\n        series.columns.template.fill = color;\r\n        series.columns.template.column.cornerRadiusTopLeft = 10;\r\n        series.columns.template.column.cornerRadiusTopRight = 10;\r\n        series.columns.template.column.fillOpacity = 0.8;\r\n\r\n        //Add buller if config available\r\n        if(cfg.bullet) {\r\n          const {type, ...bulletConfig} = cfg.bullet;\r\n          Bullets[type].add(series, bulletConfig);\r\n        }\r\n\r\n        //Add adaptors on series if provided\r\n        if(cfg.adapter) {\r\n          Object.keys(cfg.adapter).forEach((type) => {\r\n            const wrapper = (...args) => {\r\n              return cfg.adapter[type].call(null, ...args, chart);\r\n            }\r\n            series.columns.template.adapter.add(type, wrapper);\r\n          })\r\n        }\r\n    \r\n        return series;\r\n      })\r\n    }\r\n  }\r\n}","// Series\r\n\r\nconst COLUMN_SERIES = \"COLUMN_SERIES\";\r\nconst STACKED_COLUMN_SERIES = \"STACKED_COLUMN_SERIES\";\r\nconst PIE_SERIES = \"PIE_SERIES\";\r\n\r\n\r\nexport default {\r\n    COLUMN_SERIES,\r\n    STACKED_COLUMN_SERIES,\r\n    PIE_SERIES\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const StackedColumnSeries ={ \r\n    add: (chart, config) => {\r\n      if(config && Array.isArray(config.list)) {\r\n        const { category, list } = config;\r\n        return list.map((cfg) => {\r\n\r\n            const tooltipText = cfg.tooltipText;\r\n            const tooltipHTML = cfg.tooltipHTML;\r\n            const color = am4core.color(cfg.color);\r\n\r\n            let series = chart.series.push(new am4charts.ColumnSeries());\r\n            series.name = cfg.name;\r\n            series.stroke = false;\r\n            series.stacked = true;\r\n            series.columns.template.width = am4core.percent(50);\r\n            series.columns.template.tooltipText = tooltipText;\r\n            series.columns.template.tooltipHTML = tooltipHTML;\r\n            series.columns.template.fill = color;\r\n            series.columns.template.column.fillOpacity = 0.8;\r\n            series.dataFields.categoryX = category;\r\n            series.dataFields.valueY = cfg.value;\r\n            series.dataFields.valueYShow = \"totalPercent\";\r\n            series.dataItems.template.locations.categoryX = 0.5;\r\n\r\n            series.tooltip.pointerOrientation = \"vertical\";\r\n\r\n            //Add buller if config available\r\n            if(cfg.bullet) {\r\n                const {type, ...bulletConfig} = cfg.bullet;\r\n                Bullets[type].add(series, bulletConfig);\r\n            }\r\n\r\n            //Add adaptors on series if provided\r\n            if(cfg.adapter) {\r\n                Object.keys(cfg.adapter).forEach((type) => {\r\n                const wrapper = (...args) => {\r\n                    return cfg.adapter[type].call(null, ...args, chart);\r\n                }\r\n                series.columns.template.adapter.add(type, wrapper);\r\n                })\r\n            }\r\n        \r\n            return series;\r\n        });\r\n      }\r\n    }\r\n  }","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport Bullets from './../bullets';\r\n\r\nexport const PieSeries ={ \r\n  add: (chart, config) => {\r\n    if(config && Array.isArray(config.list)) {\r\n      const { category, list } = config;\r\n      return list.map((cfg) => {\r\n        const { tooltipText, tooltipHTML} = cfg;\r\n\r\n        let series = chart.series.push(new am4charts.PieSeries());\r\n\r\n        if(tooltipText) {\r\n            series.slices.template.tooltipText = tooltipText;\r\n        }\r\n        \r\n        if(tooltipHTML) {\r\n            series.slices.template.tooltipHTML = tooltipHTML;\r\n        }\r\n        \r\n        series.dataFields.category = category;\r\n        series.dataFields.value = cfg.value;\r\n\r\n        if(cfg.radiusValue) {\r\n            series.dataFields.radiusValue = cfg.radiusValue;\r\n        }\r\n\r\n        //Add buller if config available\r\n        if(cfg.bullet) {\r\n          const {type, ...bulletConfig} = cfg.bullet;\r\n          Bullets[type].add(series, bulletConfig);\r\n        }\r\n\r\n        //Add adaptors on series if provided\r\n        if(cfg.adapter) {\r\n          Object.keys(cfg.adapter).forEach((type) => {\r\n            const wrapper = (...args) => {\r\n              return cfg.adapter[type].call(null, ...args, chart);\r\n            }\r\n            series.slices.template.adapter.add(type, wrapper);\r\n          })\r\n        }\r\n    \r\n        return series;\r\n      })\r\n    }\r\n  }\r\n}","import { ColumnSeries } from './ColumnSeries';\r\nimport SERIES_CONSTS from '../../const/series';\r\nimport { StackedColumnSeries } from './StackedColumnSeries';\r\nimport { PieSeries } from './PieSeries';\r\nconst AllSeries = {}\r\n\r\nAllSeries[SERIES_CONSTS.COLUMN_SERIES] = ColumnSeries;\r\nAllSeries[SERIES_CONSTS.STACKED_COLUMN_SERIES] = StackedColumnSeries;\r\nAllSeries[SERIES_CONSTS.PIE_SERIES] = PieSeries\r\n\r\nexport default AllSeries;\r\n","import { schema } from \"./configSchema\";\r\nimport Charts from './components/charts';\r\nimport ConfigFactory from \"./configStore\";\r\nimport Legends from \"./components/legends\";\r\nimport Series from \"./components/series\";\r\n\r\nexport default class DruvaCharts {\r\n    constructor(id, config) {\r\n        config = {id, ...config};\r\n        this.validateConfig(config);\r\n        this.initConfigFactory(config);\r\n        return this.initChart();\r\n    }\r\n\r\n    validateConfig(config) {\r\n        if(typeof(config) === 'string') {\r\n            try{\r\n                config = JSON.parse(config);\r\n            } catch (err){\r\n                throw new Error('Invalid chart config.');\r\n            }\r\n        } else if(typeof(config) === 'object'){\r\n            config = config;\r\n        }\r\n\r\n        //Yup vlaidation for object\r\n        if(!schema.isValid(config)) {\r\n            throw new Error('Invalid chart config.');\r\n        }\r\n\r\n        if(!document.querySelector(`#${config.id}`)) {\r\n            throw new Error(`Element with id ${condid.id} not found`);\r\n        }\r\n    }\r\n\r\n    initConfigFactory(config) {\r\n        this.configFactory = new ConfigFactory(config);\r\n    }\r\n\r\n    initChart() {\r\n        const [type, cfg] = this.configFactory.chartConfig;\r\n        let chart = new Charts[type](cfg);\r\n        this.chart = chart.getChartObj();\r\n        this.addSeries();\r\n        this.addLegend();\r\n        return chart;\r\n    }\r\n\r\n    addSeries() {\r\n        const [type, cfg] = this.configFactory.seriesConfig;\r\n        Series[type].add(this.chart, cfg);\r\n    }\r\n\r\n    addLegend() {\r\n        const config = this.configFactory.legendConfig;\r\n        if(config) {\r\n            const [type, cfg] = config;\r\n            Legends[type].add(this.chart, cfg);\r\n        }\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport DruvaChart from '../../lib/charts';\r\nimport Charts from '../../lib/charts/const/chart';\r\n\r\nimport CHART_LEGENDS from '../../lib/charts/const/legend';\r\nimport CHART_SERIES from '../../lib/charts/const/series';\r\nimport CHART_BULLETS from '../../lib/charts/const/bullet';\r\nimport chartData from './data.json';\r\n\r\nam4core.useTheme(am4themes_animated);\r\nexport default function InitChart() {\r\n\r\n    //Stacked Column Series Chart\r\n    const stackedColConfig = {\r\n         //throw error if this element is not present\r\n        type: Charts.STACKED_COLUMN_SERIES_CHART,\r\n        xAxis: {\r\n            category: 'category'\r\n        },\r\n        yAxis: {\r\n          min: 0,\r\n          max: 100\r\n        },\r\n        series: {\r\n            type: CHART_SERIES.STACKED_COLUMN_SERIES,\r\n            list: [{ // Will always be as array\r\n                    color: \"#FBC67A\",\r\n                    format: \"#\",\r\n                    name: \"Files Modification Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value1\"\r\n                },\r\n                {\r\n                    color: \"#88A7EC\",\r\n                    format: \"#\",\r\n                    name: \"Files Encryption Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value2\"\r\n                },\r\n                {\r\n                    color: \"#88E6AF\",\r\n                    format: \"#\",\r\n                    name: \"Files Deletion Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value3\"\r\n                },\r\n                {\r\n                    color: \"#EE74A2\",\r\n                    format: \"#\",\r\n                    name: \"Files Creation Alerts\",\r\n                    tooltipHTML: \"<span>{name}</span> </br> <center><strong>{valueY.value.formatNumber('#')}</strong></center>\",\r\n                    value: \"value4\",\r\n                    bullet: {\r\n                        type: CHART_BULLETS.LABEL_BULLET,\r\n                        bulletText: \"{valueY.total}\",\r\n                        fill: '#000',\r\n                        dy: -20,\r\n                        fontSize: 20\r\n                    }\r\n                }\r\n            ]},\r\n        legend: {\r\n            type: CHART_LEGENDS.LEGEND_WITH_VALUE_TEXT,\r\n            position: 'right',\r\n            vAlign: 'bottom',\r\n            value: 'valueY'\r\n        }\r\n    }\r\n    let chart1 = new DruvaChart('stackedColumnSeries', stackedColConfig);\r\n\r\n    if(chartData.stackedColumnData.length > 7){\r\n        const xAxesTemplate = chart1.getChartObj().xAxes.getIndex(0).renderer.labels.template;\r\n        xAxesTemplate.rotation = -90;\r\n        xAxesTemplate.horizontalCenter = \"middle\";\r\n        xAxesTemplate.verticalCenter = \"middle\";\r\n    }\r\n    chart1.bindData(chartData.stackedColumnData);\r\n\r\n\r\n\r\n    // Column Series Chart\r\n    const colConfig = {\r\n        //throw error if this element is not present\r\n       type: Charts.COLUMN_SERIES_CHART,\r\n       xAxis: {\r\n           category: 'country'\r\n       },\r\n       series: {\r\n           type: CHART_SERIES.COLUMN_SERIES,\r\n           list: [{ // Will always be as array\r\n                   color: \"#FBC87A\",\r\n                   format: \"#\",\r\n                   name: \"Files Modification Alerts\",\r\n                   tooltipText: \"{valueY.value}\",\r\n                   value: \"visits\",\r\n                   adapter: {\r\n                    \"fill\": (fill, target, key, chart) => {\r\n                     return chart.colors.getIndex(target.dataItem.index);\r\n                   }\r\n                }\r\n               }\r\n           ]\r\n        }\r\n   }\r\n   let chart2 = new DruvaChart('columnSeries', colConfig);\r\n   chart2.bindData(chartData.columnSeriesData);\r\n   setTimeout(() => chart2.bindData(chartData.activityData), 5000);\r\n\r\n    // Column Series Chart\r\n    const activityChartConfig = {\r\n    //throw error if this element is not present\r\n    type: Charts.COLUMN_SERIES_CHART,\r\n    xAxis: {\r\n        category: 'country'\r\n    },\r\n    series: {\r\n        type: CHART_SERIES.COLUMN_SERIES,\r\n        list: [{ // Will always be as array\r\n                color: \"#FBC87A\",\r\n                format: \"#\",\r\n                name: \"Files Modification Alerts\",\r\n                tooltipText: \"{valueY.value}\",\r\n                value: \"visits\",\r\n                adapter: {\r\n                \"fill\": (fill, target, key, chart) => {\r\n                    if(target.dataItem.valueY > 2000){\r\n                        return am4core.color(\"#EE74A2\");\r\n                    }\r\n                    return am4core.color(\"#8A98B6\");;\r\n                }\r\n            }\r\n            }\r\n        ]\r\n    }\r\n    }\r\n\r\n    chart2.onColumnClick(function(ev) {\r\n        alert(\"Clicked on \" + ev.target.dataItem.categoryX + \": \" + ev.target.dataItem.valueY);\r\n    });\r\n\r\n   let chart3 = new DruvaChart('activityChart', activityChartConfig);\r\n   chart3.hideXAxes();\r\n   chart3.hideYAxes();\r\n   chart3.hideYAxesGridLines();\r\n   chart3.hidexAxesGridLines();\r\n   chart3.bindData(chartData.activityData);\r\n\r\n    // PieChart\r\n\r\n    let pieChartConfig = {\r\n        //throw error if this element is not present\r\n       type: Charts.PIE_CHART,\r\n       xAxis: {\r\n           category: 'country'\r\n       },\r\n       series: {\r\n           type: CHART_SERIES.PIE_SERIES,\r\n           list: [{ // Will always be as array\r\n                   tooltipHTML: \"<b>{category}: {value}</b>\",\r\n                   value: \"value\",\r\n                   radiusValue: \"value\"\r\n               }\r\n           ]\r\n        },\r\n        legend: {\r\n            type: CHART_LEGENDS.LEGEND_WITH_VALUE_TEXT,\r\n            position: 'bottom',\r\n            vAlign: 'bottom',\r\n            valueText: '{value}'\r\n        }\r\n   }\r\n\r\n   let pieChart = new DruvaChart('pieChart', pieChartConfig);\r\n   pieChart.bindData(chartData.pieChartData);\r\n   pieChart.setCornerRadius(6);\r\n}\r\n\r\n","const WORLD_MAP = \"WORLD_MAP\";\r\nconst WORLD_HEAT_MAP = \"WORLD_HEAT_MAP\";\r\n\r\nexport default {\r\n    WORLD_MAP,\r\n    WORLD_HEAT_MAP\r\n}","import * as yup from 'yup';\r\nimport MAPS from './const/map';\r\n\r\nconst WorldMapSeries = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required()\r\n});\r\n\r\nconst WorldMapHeatSeries = yup.object().shape({\r\n    id: yup.string().required(),\r\n    type: yup.string().required()\r\n});\r\n\r\nexport const schema = {\r\n    isValid: (config) => {\r\n        switch(config.type) {\r\n            case MAPS.WORLD_MAP:\r\n                return WorldMapSeries.isValidSync(config);\r\n            case MAPS.WORLD_HEAT_MAP:\r\n                return WorldMapHeatSeries.isValidSync(config);\r\n            default:\r\n                return WorldMapSeries.isValidSync(config);;   \r\n        }\r\n    }\r\n}","export default class ConfigFactory {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    get mapConfig() {\r\n        const { id, type } = this.config;\r\n        return [type, { id }];\r\n    }\r\n\r\n    get seriesConfig() {\r\n        return this.config.series;\r\n    }\r\n\r\n    get legendConfig() {\r\n        if(this.config.legend) {\r\n            const { type, ...legendConfig } = this.config.legend;\r\n            return [type, legendConfig];\r\n        }\r\n        return null;\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport MapInterface from \"./MapInterface\";\r\n\r\nexport default class WorldMap extends MapInterface{\r\n    constructor(config) {\r\n        super(config);\r\n        let map = am4core.create(config.id, am4maps.MapChart);\r\n        map.projection = new am4maps.projections.Miller();\r\n        this.map = map;\r\n    }\r\n}","import * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\n\r\nexport default class MapInterface {\r\n\r\n    addSeries() {\r\n        throw new Error('Function addSeries not implemented');\r\n    }\r\n\r\n    addLegend() {\r\n        throw new Error('Function addLegend not implemented');\r\n    }\r\n\r\n    getMapConfig() {\r\n        return this.config;\r\n    }\r\n\r\n    getMapObj(){\r\n        return this.map;\r\n    }\r\n\r\n    bindData(name, data) {\r\n        if(typeof(name) === 'string'){\r\n            this.map.series.each((s) => {\r\n                if(s.name === name) {\r\n                    s.data = data;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    addZoomControl() {\r\n        this.map.zoomControl = new am4maps.ZoomControl();\r\n    }\r\n\r\n    addHomeButton(callBack) {\r\n        this.addZoomControl();\r\n        let map = this.map;\r\n        var homeButton = new am4core.Button();\r\n            homeButton.events.on(\"hit\", function(){\r\n            map.goHome();\r\n            if(typeof callBack === \"function\"){\r\n                callBack.call(null, map);\r\n            }\r\n        });\r\n\r\n        homeButton.icon = new am4core.Sprite();\r\n        homeButton.padding(7, 5, 7, 5);\r\n        homeButton.width = 30;\r\n        homeButton.icon.path = \"M16,8 L14,8 L14,16 L10,16 L10,10 L6,10 L6,16 L2,16 L2,8 L0,8 L8,0 L16,8 Z M16,8\";\r\n        homeButton.marginBottom = 10;\r\n        homeButton.parent = this.map.zoomControl;\r\n        homeButton.insertBefore(this.map.zoomControl.plusButton);\r\n    }\r\n}","import MAP_CONSTS from './../../const/map';\r\nimport WorldMap from './WorldMap';\r\n\r\nconst AllMaps = {};\r\nAllMaps[MAP_CONSTS.WORLD_MAP] = WorldMap;\r\n\r\nexport default AllMaps;\r\n","const WORLD_MAP_SERIES = \"WORLD_MAP_SERIES\";\r\nconst USA_MAP_SERIES = \"USA_MAP_SERIES\";\r\nconst INDIA_MAP_SERIES = \"INDIA_MAP_SERIES\";\r\nconst DRILL_DOWN_WORLD_SERIES = \"DRILL_DOWN_WORLD_SERIES\";\r\nconst IMAGE_SERIES = \"IMAGE_SERIES\";\r\nconst DRILL_DOWN_COUNTRY_SERIES = \"DRILL_DOWN_COUNTRY_SERIES\";\r\n\r\n\r\nexport default {\r\n    WORLD_MAP_SERIES,\r\n    USA_MAP_SERIES,\r\n    INDIA_MAP_SERIES,\r\n    DRILL_DOWN_WORLD_SERIES,\r\n    IMAGE_SERIES,\r\n    DRILL_DOWN_COUNTRY_SERIES\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport SERIES_CONST from './../../const/series';\r\n\r\nexport const WorldSeries = {\r\n    add: (map, config) => {\r\n        const { tooltipText, tooltipHTML } = config;\r\n        map.geodata = am4geodata_worldLow;\r\n        let worldSeries = map.series.push(new am4maps.MapPolygonSeries());\r\n        worldSeries.name= SERIES_CONST.WORLD_MAP_SERIES;\r\n        worldSeries.exclude = config.exclude;\r\n        worldSeries.useGeodata = true;\r\n\r\n        let worldTemplate = worldSeries.mapPolygons.template;\r\n\r\n        if(tooltipText) {\r\n            worldTemplate.tooltipText = tooltipText;\r\n        }\r\n        \r\n        if(tooltipHTML) {\r\n            worldTemplate.tooltipHTML = tooltipHTML;\r\n        }\r\n\r\n        let mapColor = config.color && am4core.color(config.color) || map.colors.getIndex(0)\r\n        worldTemplate.fill = mapColor;\r\n        worldTemplate.nonScalingStroke = true;\r\n\r\n        let hoverState = worldTemplate.states.create(\"hover\");\r\n        hoverState.properties.fill = config.hoverColor && am4core.color(config.hoverColor) || am4core.color(\"#367B25\");\r\n\r\n        if(config.heatRules) {\r\n            const { legendMinValue, legendMaxValue, colorMin, colorMax, legendAlign, legendVAlign, legendRotation } = config.heatRules\r\n            //Set min/max fill color for each area\r\n            worldSeries.heatRules.push({\r\n                property: \"fill\",\r\n                target: worldTemplate,\r\n                min: mapColor.brighten(colorMin || 10),\r\n                max: mapColor.brighten(colorMax || 2)\r\n            });\r\n\r\n            // Set up heat legend\r\n            var heatLegend = map.chartContainer.createChild(am4maps.HeatLegend);\r\n            heatLegend.valign = \"bottom\";\r\n            heatLegend.align = \"left\";\r\n            heatLegend.width = am4core.percent(50);\r\n            heatLegend.series = worldSeries;\r\n            heatLegend.orientation = \"horizontal\";\r\n            heatLegend.padding(20, 20, 20, 20);\r\n            heatLegend.valueAxis.renderer.labels.template.fontSize = 10;\r\n            heatLegend.valueAxis.renderer.minGridDistance = 40;\r\n            heatLegend.markerCount = 5;\r\n\r\n            // Set up custom heat map legend labels using axis ranges\r\n            var minRange = heatLegend.valueAxis.axisRanges.create();\r\n            minRange.value = heatLegend.minValue;\r\n            minRange.label.text = legendMinValue;\r\n            var maxRange = heatLegend.valueAxis.axisRanges.create();\r\n            maxRange.value = heatLegend.maxValue;\r\n            maxRange.label.text = legendMaxValue;\r\n        }\r\n\r\n        if(config.onZoom) {\r\n            var lastSelected;\r\n            worldTemplate.events.on(\"hit\", function(ev) {\r\n                if (lastSelected) {\r\n                    lastSelected.isActive = false;\r\n                }\r\n                ev.target.series.chart.zoomToMapObject(ev.target);\r\n                if (lastSelected !== ev.target) {\r\n                    lastSelected = ev.target;\r\n                }\r\n\r\n                if(typeof config.onZoom === \"function\") {\r\n                    config.onZoom.call(null, map);\r\n                }\r\n            });\r\n\r\n            /* Create selected and hover states and set alternative fill color */\r\n            var ss = worldTemplate.states.create(\"active\");\r\n            ss.properties.fill = map.colors.getIndex(2);\r\n\r\n            var hs = worldTemplate.states.create(\"hover\");\r\n            hs.properties.fill = map.colors.getIndex(4);\r\n        }\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_indiaLow from \"@amcharts/amcharts4-geodata/indiaLow\";\r\nimport SERIES_CONST from './../../const/series';\r\n\r\nexport const IndiaSeries = {\r\n    add: (map, config) => {\r\n\r\n        // Series for India map\r\n        let indiaSeries = map.series.push(new am4maps.MapPolygonSeries());\r\n        indiaSeries.name = SERIES_CONST.INDIA_MAP_SERIES;\r\n\r\n        indiaSeries.geodata = am4geodata_indiaLow;\r\n        let indiaPolygonTemplate = indiaSeries.mapPolygons.template;\r\n        indiaPolygonTemplate.tooltipText = \"{name}\";\r\n        indiaPolygonTemplate.fill = config.color && am4core.color(config.color) || map.colors.getIndex(0);\r\n        indiaPolygonTemplate.nonScalingStroke = true;\r\n\r\n        // Hover state\r\n        hs = indiaPolygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = config.hoverColor && am4core.color(config.hoverColor) || am4core.color(\"#367B25\");\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_usaLow from \"@amcharts/amcharts4-geodata/usaLow\";\r\nimport SERIES_CONST from './../../const/series';\r\n\r\nexport const USASeries = {\r\n    add: (map, config) => {\r\n        const { tooltipText, tooltipHTML } = config;\r\n        let usaSeries = map.series.push(new am4maps.MapPolygonSeries());\r\n        usaSeries.name = SERIES_CONST.USA_MAP_SERIES;\r\n        usaSeries.geodata = am4geodata_usaLow;\r\n        usaSeries.useGeodata = true;\r\n        let usPolygonTemplate = usaSeries.mapPolygons.template;\r\n\r\n        if(tooltipText) {\r\n            usPolygonTemplate.tooltipText = tooltipText;\r\n        }\r\n\r\n        if(tooltipHTML) {\r\n            usPolygonTemplate.tooltipHTML = tooltipHTML;\r\n        }\r\n\r\n        usPolygonTemplate.fill = config.color && am4core.color(config.color) || map.colors.getIndex(0);\r\n        usPolygonTemplate.nonScalingStroke = true;\r\n\r\n        // Hover state\r\n        let hs = usPolygonTemplate.states.create(\"hover\");\r\n        hs.properties.fill = config.hoverColor && am4core.color(config.hoverColor) || am4core.color(\"#367B25\");\r\n\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\r\nimport SERIES_CONST from './../../const/series';\r\nimport { showIndicator } from \"./seriesLoader\";\r\n\r\nexport const DrillDownWorldSeries = {\r\n    add: (map, config) => {\r\n        const { tooltipText, tooltipHTML } = config;\r\n        map.geodata = am4geodata_worldLow;\r\n        let worldSeries = map.series.push(new am4maps.MapPolygonSeries());\r\n        worldSeries.name= SERIES_CONST.WORLD_MAP_SERIES;\r\n        worldSeries.exclude = config.exclude;\r\n        worldSeries.useGeodata = true;\r\n        worldSeries.dataFields.value = config.value;\r\n\r\n        let worldTemplate = worldSeries.mapPolygons.template;\r\n\r\n        if(tooltipText) {\r\n            worldTemplate.tooltipText = tooltipText;\r\n        }\r\n        \r\n        if(tooltipHTML) {\r\n            worldTemplate.tooltipHTML = tooltipHTML;\r\n        }\r\n\r\n        let mapColor = config.color && am4core.color(config.color) || map.colors.getIndex(0)\r\n        worldTemplate.fill = mapColor;\r\n        worldTemplate.nonScalingStroke = true;\r\n\r\n        let hoverState = worldTemplate.states.create(\"hover\");\r\n        hoverState.properties.fill = config.hoverColor && am4core.color(config.hoverColor) || am4core.color(\"#367B25\");\r\n\r\n        if(config.heatRules) {\r\n            const { legendMinValue, legendMaxValue, colorMin, colorMax } = config.heatRules\r\n            //Set min/max fill color for each area\r\n            worldSeries.heatRules.push({\r\n                property: \"fill\",\r\n                target: worldTemplate,\r\n                min: mapColor.brighten(colorMin || 10),\r\n                max: mapColor.brighten(colorMax || 2)\r\n            });\r\n\r\n            // Set up heat legend\r\n            var heatLegend = map.chartContainer.createChild(am4maps.HeatLegend);\r\n            heatLegend.valign = \"bottom\";\r\n            heatLegend.align = \"left\";\r\n            heatLegend.width = am4core.percent(50);\r\n            heatLegend.series = worldSeries;\r\n            heatLegend.orientation = \"horizontal\";\r\n            heatLegend.padding(20, 20, 20, 20);\r\n            heatLegend.valueAxis.renderer.labels.template.fontSize = 10;\r\n            heatLegend.valueAxis.renderer.minGridDistance = 40;\r\n            heatLegend.markerCount = 5;\r\n\r\n            // Set up custom heat map legend labels using axis ranges\r\n            var minRange = heatLegend.valueAxis.axisRanges.create();\r\n            minRange.value = heatLegend.minValue;\r\n            minRange.label.text = legendMinValue;\r\n            var maxRange = heatLegend.valueAxis.axisRanges.create();\r\n            maxRange.value = heatLegend.maxValue;\r\n            maxRange.label.text = legendMaxValue;\r\n        }\r\n\r\n        // if(config.onZoom) {\r\n        //     var lastSelected;\r\n        //     worldTemplate.events.on(\"hit\", function(ev) {\r\n        //         if (lastSelected) {\r\n        //             lastSelected.isActive = false;\r\n        //         }\r\n        //         ev.target.series.chart.zoomToMapObject(ev.target);\r\n        //         if (lastSelected !== ev.target) {\r\n        //             lastSelected = ev.target;\r\n        //         }\r\n\r\n        //         if(typeof config.onZoom === \"function\") {\r\n        //             config.onZoom.call(map);\r\n        //         }\r\n        //     });\r\n\r\n        //     /* Create selected and hover states and set alternative fill color */\r\n        //     var ss = worldTemplate.states.create(\"active\");\r\n        //     ss.properties.fill = map.colors.getIndex(2);\r\n\r\n        //     var hs = worldTemplate.states.create(\"hover\");\r\n        //     hs.properties.fill = map.colors.getIndex(4);\r\n        // }\r\n\r\n        // Create country specific series (but hide it for now)\r\n        var countrySeries = map.series.push(new am4maps.MapPolygonSeries());\r\n        countrySeries.useGeodata = true;\r\n        countrySeries.name = SERIES_CONST.DRILL_DOWN_COUNTRY_SERIES;\r\n        countrySeries.hide();\r\n        countrySeries.geodataSource.events.on(\"done\", function(ev) {\r\n            countrySeries.show();\r\n        });\r\n\r\n        var countryPolygon = countrySeries.mapPolygons.template;\r\n        countryPolygon.tooltipText = \"{name}\";\r\n        countryPolygon.nonScalingStroke = true;\r\n        countryPolygon.strokeOpacity = 0.5;\r\n        countryPolygon.fill = am4core.color(\"#eee\");\r\n\r\n        var hs = countryPolygon.states.create(\"hover\");\r\n        hs.properties.fill = map.colors.getIndex(5);\r\n\r\n        // Set up click events\r\n        worldTemplate.events.on(\"hit\", function(ev) {\r\n            let series = ev.target.series;\r\n            series.chart.zoomToMapObject(ev.target);\r\n            var targetMap = ev.target.dataItem.dataContext.map;\r\n            if (targetMap) {\r\n                ev.target.isHover = false;\r\n                countrySeries.geodataSource.url = \"https://www.amcharts.com/lib/4/geodata/json/\" + targetMap[0] + \".json\";\r\n                countrySeries.geodataSource.load();\r\n                if(config.onZoom && typeof config.onZoom === \"function\") {\r\n                    config.onZoom.call(null, map, ev.target);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport SERIES_CONST from './../../const/series';\r\n\r\nexport const ImageSeries = {\r\n    add: (map, config) => {\r\n        // create capital markers\r\n        let imageSeries = map.series.push(new am4maps.MapImageSeries());\r\n        imageSeries.name = SERIES_CONST.IMAGE_SERIES;\r\n\r\n        // define template\r\n        let imageSeriesTemplate = imageSeries.mapImages.template;\r\n        let circle = imageSeriesTemplate.createChild(am4core.Sprite);\r\n        circle.scale = 0.4;\r\n        circle.fill = new am4core.InterfaceColorSet().getFor(\"alternativeBackground\");\r\n        circle.path = config.imagePath;\r\n        // what about scale...\r\n\r\n        // set propertyfields\r\n        imageSeriesTemplate.propertyFields.latitude = config.latitude;\r\n        imageSeriesTemplate.propertyFields.longitude = config.longitude;\r\n\r\n        imageSeriesTemplate.horizontalCenter = \"middle\";\r\n        imageSeriesTemplate.verticalCenter = \"middle\";\r\n        imageSeriesTemplate.align = \"center\";\r\n        imageSeriesTemplate.valign = \"middle\";\r\n        imageSeriesTemplate.width = 8;\r\n        imageSeriesTemplate.height = 8;\r\n        imageSeriesTemplate.nonScaling = true;\r\n        if(config.tooltipText){\r\n            imageSeriesTemplate.tooltipText = config.tooltipText;\r\n        }\r\n        \r\n        if(config.tooltipHTML){\r\n            imageSeriesTemplate.tooltipText = config.tooltipHTML;\r\n        }\r\n\r\n        imageSeriesTemplate.fill = am4core.color(\"#000\");\r\n        imageSeriesTemplate.background.fillOpacity = 0;\r\n        imageSeriesTemplate.background.fill = am4core.color(\"#ffffff\");\r\n        imageSeriesTemplate.setStateOnChildren = true;\r\n        imageSeriesTemplate.states.create(\"hover\");\r\n    }\r\n}","import SERIES from './../../const/series';\r\nimport { WorldSeries } from './worldSeries';\r\nimport { IndiaSeries } from './indiaSeries';\r\nimport { USASeries } from './usaSeries';\r\nimport { DrillDownWorldSeries } from './drillDownWorldSeries';\r\nimport { ImageSeries } from './imageSeries';\r\n\r\nconst AllSeries = {};\r\nAllSeries[SERIES.WORLD_MAP_SERIES] = WorldSeries;\r\nAllSeries[SERIES.USA_MAP_SERIES] = USASeries;\r\nAllSeries[SERIES.INDIA_MAP_SERIES] = IndiaSeries;\r\nAllSeries[SERIES.DRILL_DOWN_WORLD_SERIES] = DrillDownWorldSeries;\r\nAllSeries[SERIES.IMAGE_SERIES] = ImageSeries;\r\n\r\nexport default AllSeries;\r\n\r\n","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nimport { schema } from \"./configSchema\";\r\nimport ConfigFactory from \"./configStore\";\r\nimport Maps from './components/maps';\r\nimport Series from './components/series';\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\nclass DruvaMaps {\r\n\r\n    createMap(id, config) {\r\n        config.id = id;\r\n        this.validateConfig(config);\r\n        let configFactory = this.initConfigFactory(config)\r\n        let druvaMap = this.initMap(configFactory);\r\n\r\n        this.addSeries(druvaMap, configFactory);\r\n        this.addLegend(druvaMap, configFactory);\r\n\r\n        return druvaMap;\r\n    }\r\n\r\n    validateConfig(config) {\r\n        if(typeof(config) === 'string') {\r\n            try{\r\n                config = JSON.parse(config);\r\n            } catch (err){\r\n                throw new Error('Invalid map config.');\r\n            }\r\n        } else if(typeof(config) === 'object'){\r\n            config = config;\r\n        }\r\n\r\n        //Yup vlaidation for object\r\n        if(!schema.isValid(config)) {\r\n            throw new Error('Invalid map config.');\r\n        }\r\n\r\n        if(!document.querySelector(`#${config.id}`)) {\r\n            throw new Error(`Element with id ${condid.id} not found`);\r\n        }\r\n    }\r\n\r\n    initConfigFactory(config) {\r\n        return new ConfigFactory(config);\r\n    }\r\n\r\n    initMap(configFactory) {\r\n        const [type, cfg] = configFactory.mapConfig;\r\n        return new Maps[type](cfg);\r\n    }\r\n\r\n    addSeries(druvaMap, configFactory) {\r\n        const list = configFactory.seriesConfig;\r\n        list.forEach((series) => {\r\n            const { type, ...cfg } = series\r\n            Series[type].add(druvaMap.getMapObj(), cfg);\r\n        });\r\n    }\r\n\r\n    addLegend(druvaMap, configFactory) {\r\n        const config = configFactory.legendConfig;\r\n        if(config) {\r\n            const [type, cfg] = config;\r\n            Legends[type].add(druvaMap.getMapObj(), cfg);\r\n        }\r\n    }\r\n}\r\n\r\nconst DruvaMapsFactory = new DruvaMaps();\r\nexport { DruvaMapsFactory };","import { InitChart, InitMap } from \"./demo/\";\r\n\r\nlet appTittle = document.querySelector('#tittle');\r\nlet mapHeader = document.querySelector('.tab-header.maps');\r\nlet mapBody = document.querySelector('.tab-body.tab-body-map');\r\nlet chartBody = document.querySelector('.tab-body.tab-body-chart');\r\n\r\nappTittle.innerHTML = '<h2>Welcome to amChartLib</h2>'\r\n\r\n\r\nInitChart();\r\nInitMap();","import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport Maps from '../../lib/maps/const/map';\r\nimport mapData from './mapData.json';\r\nimport { DruvaMapsFactory } from './../../lib/maps';\r\nimport MAP_SERIES from '../../lib/maps/const/series';\r\nimport drillDownMapData from './drillDownMap.json';\r\nimport capitalsData from './capitals.json';\r\n\r\nexport default function InitMap() {\r\n    // world map\r\n    am4core.useTheme(am4themes_animated);\r\n    let mapConfig = {\r\n        type: Maps.WORLD_MAP,\r\n        series: [{\r\n            type: MAP_SERIES.WORLD_MAP_SERIES,\r\n            exclude: [\"AQ\"],\r\n            tooltipText: \"{name}: {value}\"\r\n        },\r\n        {\r\n            type: MAP_SERIES.USA_MAP_SERIES,\r\n            tooltipText: \"{name}: {value}\"\r\n        }]\r\n    }\r\n\r\n    let map = DruvaMapsFactory.createMap('worldmap', mapConfig);\r\n    map.bindData(MAP_SERIES.USA_MAP_SERIES, JSON.parse(JSON.stringify(mapData.USData)));\r\n    map.bindData(MAP_SERIES.WORLD_MAP_SERIES, JSON.parse(JSON.stringify(mapData.worldData)));\r\n    map.addHomeButton();\r\n\r\n    // world heat map\r\n    let heatMapConfig = {\r\n        type: Maps.WORLD_MAP,\r\n        series: [{\r\n            type: MAP_SERIES.WORLD_MAP_SERIES,\r\n            exclude: [\"AQ\"],\r\n            tooltipText: \"{name}: {value}\",\r\n            color: \"#00B2E0\",\r\n            heatRules: {\r\n                colorMin: 4,\r\n                colorMax: -0.3,\r\n                legendMinValue: 1000,\r\n                legendMaxValue: 5000,\r\n            },\r\n            onZoom: (map) => {\r\n                console.log(map);\r\n            }\r\n        }]\r\n    }\r\n\r\n    let heatMap = DruvaMapsFactory.createMap('worldHeatmap', heatMapConfig);\r\n    heatMap.bindData(MAP_SERIES.WORLD_MAP_SERIES, JSON.parse(JSON.stringify(mapData.worldData)));\r\n    heatMap.addZoomControl();\r\n    heatMap.addHomeButton();\r\n\r\n    //World capitals map\r\n    let capitalsMapConfig = {\r\n        type: Maps.WORLD_MAP,\r\n        series: [{\r\n            type: MAP_SERIES.WORLD_MAP_SERIES,\r\n            exclude: [\"AQ\"],\r\n            color: \"#00B2E0\",\r\n            onZoom: (map, series) => {\r\n                console.log(map);\r\n                console.log(series);                \r\n            }\r\n        },\r\n        {\r\n            type: MAP_SERIES.IMAGE_SERIES,\r\n            latitude: \"latitude\",\r\n            longitude: \"longitude\",\r\n            imagePath: \"M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z\",\r\n            tooltipText: \"{title}\",\r\n            tooltipHTML: \"\"\r\n        }\r\n    ]\r\n    }\r\n    let capitalsMap = DruvaMapsFactory.createMap('capitalsMap', capitalsMapConfig);\r\n    capitalsMap.bindData(MAP_SERIES.IMAGE_SERIES, JSON.parse(JSON.stringify(capitalsData)));\r\n    capitalsMap.addZoomControl();\r\n    capitalsMap.addHomeButton();\r\n\r\n    //World Heat map with drill down zoom\r\n    let drillDownHeatMapConfig = {\r\n        type: Maps.WORLD_MAP,\r\n        series: [{\r\n            type: MAP_SERIES.DRILL_DOWN_WORLD_SERIES,\r\n            exclude: [\"AQ\"],\r\n            tooltipText: \"{name}: {value}\",\r\n            color: \"#00B2E0\",\r\n            value: 'value1',\r\n            heatRules: {\r\n                colorMin: 4,\r\n                colorMax: -0.3,\r\n                legendMinValue: 1000,\r\n                legendMaxValue: 5000,\r\n            },\r\n            onZoom: (map, target) => {\r\n                map.series.each((mapSeries) => {\r\n                    if(mapSeries.name === MAP_SERIES.IMAGE_SERIES) {\r\n                        if(!mapSeries.visible) {\r\n                            mapSeries.show();\r\n                        }\r\n                        mapSeries.data = JSON.parse(JSON.stringify(capitalsData))\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        {\r\n            type: MAP_SERIES.IMAGE_SERIES,\r\n            latitude: \"latitude\",\r\n            longitude: \"longitude\",\r\n            imagePath: \"M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z\",\r\n            tooltipText: \"{title}\",\r\n            tooltipHTML: \"\"\r\n        }\r\n    ]\r\n    }\r\n\r\n    let drillDownHeatMap = DruvaMapsFactory.createMap('worldDrillDownHeatmap', drillDownHeatMapConfig);\r\n    drillDownHeatMap.bindData(MAP_SERIES.WORLD_MAP_SERIES, JSON.parse(JSON.stringify(drillDownMapData)));\r\n    drillDownHeatMap.addZoomControl();\r\n    drillDownHeatMap.addHomeButton((map) => {\r\n        map.series.each((mapSeries) => {\r\n            if([MAP_SERIES.IMAGE_SERIES, MAP_SERIES.DRILL_DOWN_COUNTRY_SERIES].indexOf(mapSeries.name) > -1){\r\n                mapSeries.hide();\r\n            }\r\n        });\r\n    });\r\n}"],"sourceRoot":""}